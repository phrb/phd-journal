# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages logdrawer
#+TITLE:  Pedro's Journal
#+AUTHOR:      Pedro H R Bruel
#+LANGUAGE:    en
#+TAGS: noexport(n) Stats(S)
#+TAGS: Teaching(T) R(R) OrgMode(O) Python(P)
#+TAGS: Book(b) DOE(D) Code(C) NODAL(N) FPGA(F) Autotuning(A) Arnaud(r)
#+TAGS: DataVis(v)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w@) APPT(a!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* Setup
Cloning the =legup-tuner= repository:

#+NAME: update_legup_tuner
#+BEGIN_SRC sh :results output
git clone https://github.com/phrb/legup-tuner.git || (cd legup-tuner && git pull)
#+END_SRC

Export your path to =repository_dir= variable:

#+name: repository_dir
#+begin_src sh :results output :exports both
pwd | tr -d "\n"
#+end_src

* 2017
** November 
*** [2017-11-28 Tue]
**** Install and Configure Emacs
- Attempted to use vim-orgmode but gave up: not enough features
- Switch to Emacs
**** Start an OrgMode Journal
- Use template from webinars
- Populate with some tasks
**** Advance on Reconfig Presentation
- Should add presentation notes for Alfredo
*** [2017-11-29 Wed]
- Complete Reconfig Presentation
- Read Fisher's Design of Experiments
**** Meeting with Alfredo
- Present our work for Brice and his research center
- Finish slides for Reconfig
*** [2017-11-30 Thu]
- Fix OFII form error and post it
- Start working on NODAL poster
**** Amélie's Presentation
- She is the author of Johanne's NIPS paper
- Two bandit cases: bandit and semi-bandit
- It is possible to achieve Nash Equilibria with both, given certain
  conditions
- I sent her an e-mail, asking for her C++ implementation of her work
- She already sent her code
- Print and read Amélie's paper
** December
*** Reading Fisher's Design & Montgomery's Design                :Book:DOE:
**** Quotes for key concepts
- "Every experiment may be said to exist only in order to give the
    facts a chance of disproving the null hypothesis"
- "The null hypothesis must be exact, that is free from vagueness and
    ambiguity"
**** A null hipothesis for autotuning techniques
***** Definitions
- A base autotuning technique t_b
- A new autotuning technique t_n
- A set of autotuning problems P
- A metric M
***** An exact null hipothesis H 
- We can state H as: The improvement of M produced by t_n is equal to t_b for all
  problems p \in P, that is, t_n performance is equal to t_b for P.
***** Problems 
- What is the chance of disproving H? In other words, to be considered better for P,
  for how many problems p \in P must t_n perform better than t_b?
- The set P must be very well chosen for this experiment to make sense. 
*** Studying "Learning with Bandit Feedback in Potential Games"      :Code:
**** Reading "Learning with Bandit Feedback in Potential Games" 
The [[file:~/Dropbox/papers/bandit-problem/cohen2017learning.pdf][pdf file]] is in my paper library.
***** Managing Autotuning Techniques as an N-Player Game
- Understanding applicability will require studying the implementation
  in C++ shared by Amélie.
- The players are distributed processes
- The actions are changing, keeping, restarting or reconfiguring
  search techniques
- The payoff is finding better configurations
  - Related to the Area Under the Curve Credit Assignment
  - The 'full bandit' case is very similar to MAB AUC
- Gaming strategies could consist of policies to select
  techniques based on the number of processes, past results,
  and maybe characteristics of the search space
- In this context, what would be equivalent to the *Nash Equilibrium*?
  - No process "wants" to change its policy for selecting techniques
  - No process "wants" to change its current technique
**** Studying the code from "Learning with Bandit Feedback in Potential Games"
The [[file:~/code/bandit-johanne/][source code]] is located in my code library.  
***** General Questions & Considerations
It seems the game has only 2 players, but the paper considers N-player
games. From the paper, it seems that the N-player implementation would
work without much change.

Payoffs seem to be pre-computed for each strategy but this does not,
at first, imply that needing to compute the payoffs would change
anything.

To adapt this code to the selection of search algorithms by Julia
processes we would need a way to implement the strategies.
***** Questions about specific points in code
****** =main.cpp=
Questions and execution flow related to the [[file:~/code/bandit-johanne/code/main.cpp][main file]].

******* Questions

- Why weren't random payoffs used?
- How are strategies represented in the =evol= array?

******* Execution Flow

1. Declare payoff and strategy arrays
2. Initialize pre-computed payoffs
3. Initialize seeds array
4. Instantiate a new =Game=
5. Call =Game->Play=
6. Save output to file
   
****** =game.h= & =game.cpp=
Questions and execution flow related to the [[file:~/code/bandit-johanne/code/game.h][header]] and the [[file:~/code/bandit-johanne/code/game.cpp][implementation]].

******* Questions

Re-read [[file:~/Dropbox/papers/bandit-problem/cohen2017learning.pdf][the paper]] to understand:

- What is a potential game?
- What does the =potential_function= do?
- What are the constraints on payoff arrays?
- What are =gamma= & =utility=?
- What is =res= used for inside =Game->play=? And inside =Game=?

******* Execution Flow

1. Instantiated by =main.cpp=
2. =void Game->play= is called by =main.cpp=
3. Open output file
4. Loop for the number of steps:
   1. Registers player strategies in =evol= for step =i= such that:
      #+BEGIN_SRC C
evol[i][(int)floor(P1->proba_strat[0]*100)][(int)floor(P2->proba_strat[0]*100)]++;
      #+END_SRC
   
      Where =P1= and =P2= are =Player= objects and the =proba_strat= arrays store
      the current strategy of each player.
   2. Calls =play_one_turn= (see below)
5. Save output to file

******** Execution Flow of =play_one_turn=

1. Called by =Game->play=
2. Initializes =epsilon=, =gamma= and =utility=
3. Set strategies for each player with =P->setStrat()= and
   =P->draw_proba()=
4. Update =utility= arrays with =P1->utility(P2->getStrat())=
   and =P2->utility(P1->getStrat())=
5. Update =y_strat= arrays with =utility= and =gamma=
6. Calls =P->update_proba(epsilon)= for each player

****** =player.h= & =player.cpp=
Questions and execution flow related to the
[[file:~/code/bandit-johanne/code/player.h][header]] and the
[[file:~/code/bandit-johanne/code/player.cpp][implementation]].

******* Questions

- What are the arrays =proba_strat= & =y_strat=?

*** NODAL Development                                          :Code:NODAL:
**** Installing NODAL in Julia Nightly
[[https://github.com/phrb/NODAL.jl][NODAL]] is the autotuning library I am developing in the [[https://julialang.org][Julia]]
language. The idea is to provide tools for the implementation of
parallel and distributed autotuners for various problem domains.
***** Download Julia Nightly
****** [[https://julialang.org/downloads][Download Generic Binary]] 
****** Downloading from the CLI
You can run the following to install the latest *Julia* version:
#+BEGIN_SRC bash
cd ~ && mkdir .bin && cd .bin
wget https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz
tar xvf julia-latest-linux64.tar.gz
mv julia-* julia
rm julia-latest-linux64.tar.gz
#+END_SRC
This will put the *Julia* binary at =~/.bin/julia/bin/julia=.
You can use it like that or add an =alias= to your shell.
***** Installing the unregistered version
This will not be needed after registering NODAL to METADATA.
****** [[https://docs.julialang.org/en/latest/manual/packages/#Installing-Unregistered-Packages-1][Documentation]]
****** Julia Commands
#+BEGIN_SRC julia
Pkg.clone("https://github.com/phrb/NODAL.jl")
Pkg.build("NODAL")
Pkg.test("NODAL")
#+END_SRC
***** Installing from the Julia package manager
****** Julia commands
#+BEGIN_SRC julia
Pkg.add("NODAL")
Pkg.build("NODAL")
Pkg.test("NODAL")
#+END_SRC
**** Setting up a new Release
***** Using Attobot
[[https://github.com/attobot][Attobot]] integrates with *GitHub* to automatically register a new package
or a package version to *Julia*'s =METADATA= package repository.  Attobot
only needs a new *GitHub* release to work.
***** Using *Julia*'s =PkgDev=
Check the [[https://docs.julialang.org/en/latest/manual/packages/#Tagging-and-Publishing-Your-Package-1][documentation]] to learn how to register and publish user
packages to =METADATA=.
**** Development Workflow
The process of fixing an [[https://github.com/phrb/NODAL.jl/issues][issue]] or submitting a new
feature is:
0. Fork [[https://github.com/phrb/NODAL.jl][NODAL on GitHub]]
   
   You will need a GitHub account for this.

1. Make sure you have the latest version
   #+BEGIN_SRC bash
git checkout master
git fetch
   #+END_SRC

   New branches must be made from the =dev= branch:
   #+BEGIN_SRC bash
git checkout dev
   #+END_SRC
2. Checkout a new branch
   #+BEGIN_SRC bash
git checkout -b fix-or-feature
   #+END_SRC
3. Write code and commit to your new branch
   
   Make sure you write short and descriptive commit
   messages. Something similar to [[https://udacity.github.io/git-styleguide/][Udacity's guidelines]] is preferred
   but not strictly necessary.

4. Open a [[https://github.com/phrb/NODAL.jl/pulls][pull request]] to the =dev= bran
*** [2017-12-01 Fri]
- Finish the Reconfig poster
- Converge to final Reconfig presentation
*** [2017-12-04 Mon]
- Set up build environment for latest Julia version
- Apply Sai's corrections to presentation
**** Fix NODAL's status in Julia pkg Manager
- Fixed warnings and deprecations
- Tagged new version 'v0.3.5'
- Released new version
- Made new pull request to METADATA
- Waiting for merge
*** [2017-12-05 Tue]
- Started using new us-layout keyboard.
- Study the Bandit's code and paper
**** Start NODAL's 'dev' branch
- Pushed 'dev' branch to GitHub repository.
- Added development workflow to Journal
*** [2017-12-06 Wed]
- Describe Hedge's code exec flow ([[Studying "Learning with Bandit Feedback in Potential Games"][Main Section]])
- Elaborate concrete bandit implementation plan for autotuning ([[Studying "Learning with Bandit Feedback in Potential Games"][Main Section]])
- Resume study of Fisher's and Montgomer's books ([[Reading Fisher's Design & Montgomery's Design][Main Section]])
**** Discussion with Brice and Arnaud
Meeting notes kindly taken by Arnaud.
***** Questions left open in Pedro's journal
- Bandits: This would clearly be useful for auto-tuning as we may not
  know in advance what would work better on a given instance.
  - Bandit algorithms could be used to select which algorithms work better.
  - They could also be used to select which areas to explore.
  A possibly interesting question is "How does parallel bandit work?".

- Game Theory: branch of mathematics for
  1. modeling/studying situations where agents compete with each others.
  2. improving situation where agents compete with each others
  3. design fully distributed algorithms/protocols
  It's not clear yet how game theory would help in our auto-tuning
  context but we can keep this in mind.

- Design of Experiments: Master 2 lecture on
[[https://github.com/alegrand/SMPE][SMPE]]. Description and
  rooms are
[[http://mescal.imag.fr/membres/arnaud.legrand/teaching/2017/M2R_SMPE.php][here]].

- Quick discussions about Julia and how it compares with other
  languages (compiled on the fly, FFI, ...).
***** Autotuning context:
  - So far, with FPGAs, what was distinctive was:
    1. Many many compilation parameters
    2. Several parameters to optimize
    3. Extremely long experiments
    4. Parallel exploration
    Can we keep all these research challenges open or should we focus
    on one or two of them ?
  - Brice thinks there is:
    - The structure of the code is also important for the compiler and
      it may be worth looking at code transformation. Changing the
      code may have a lot of impact on performance and this
      variability may contain a lot of useful information. BOAST
      (meta-programming rather than code transformation) can help to
      investigate this.

      Actually, the fact some gain can be obtained by tweaking the
      compiler option may mean we're far from the peak performance,
      which may be caused by an ineffective code structure. *This could
      be explored with BOAST and* *we should probably check this before
      going into compiler flag exploration*.
  - Discussions about compiler passes (LLVM) and the importance of
    unroll/jam.
  - Questions:
    - Do we have FPGAs to play with ?
      - Some of the recent Intel Skylake CPUs have FPGAs. They were
        released in Spring but Google and Amazon bought them all so we
        have to wait for new ones to be produced.
    - Do we have the right compilers/toolchain ? Is it functional ?
      - Maybe. :) Intel is supposed to provide us with an OpenCL to
        FPGA compiler with their Skylake chips.
      - Before, Pedro used an open-source High Level Synthesis tool.
    - Can we explore application structures for FPGAs with BOAST ?
      - Sure, why not ?

  - Arnaud mentions http://www.exanest.eu/ and Fabien Chaix he knows
    quite well.
  - Pedro's work was published at ReConfig (Cancun) and Alfredo's
    currently presenting it.
    - https://github.com/phrb/slides-reconfig-2017-autotuning
    -
https://github.com/phrb/slides-reconfig-2017-autotuning/raw/master/src/presentation.pdf
      - Slide 9: We have a quick discussion on why there is a single
        configuration file controlling all the knobs/parameters of the
        blue workflow compared to being able to obtain intermediary
        information and possibly perform selections at each step
        before moving to the next one.
      - Slide 9: This phase is fast. It's the compiling from the
        Verilog format to the hardware synthesis that is really
        slow. They use Quartus. Quartus also has parameters but this
        parameter space was not explored yet in this work.
        - LegUp is supposed to have a cost model that allows to guide
          the optimization without going all the way down to the
          hardware synthesis to evaluate configurations but it was not
          functional.
      - Slide 11: summarizes the whole workflow. 6+ compilation passes
      - Brice wonders if peak performance models exists for such
        app/systems. It would be worth knowing how far we are from the
        optimal to decide whether further optimizations are needed.
      - Quick discussion about multi-criteria optimization and Pareto
        front.
***** Stuff to do
- Create a big data frame with all the samples you obtained during the
  exploration of the autotuner. We'll try to explore (metric
  variability, parameter space exploration, criteria Pareto structure)
  it together.
- The same could be done for GPU experiments.
*** [2017-12-07 Thu]
**** Creating a Data Frame for FPGA Autotuning Samples :R:Code:FPGA:Autotuning:
***** Installing R Dependencies
The next code block install all =R= dependencies.
We are not using =ggplot2= to create the =csv= files,
but it will be used later for plotting.

We are installing =rjson= because part of the data files were generated
by OpenTuner in the =JSON= format.  The other packages are from Arnaud's
[[https://github.com/alegrand/SMPE#learning-r][guidelines]] for the SMPE course.

#+HEADER: :results output :exports both
#+BEGIN_SRC R
install.packages(c("ggplot2", "dplyr", "tidyr", "rjson", "GGally"),
                 repos = "https://mirror.ibcp.fr/pub/CRAN/")
#+END_SRC

#+RESULTS:
: g++  -I/usr/include/R/ -DNDEBUG   -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c dump.cpp -o dump.o
: gcc -I/usr/include/R/ -DNDEBUG   -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c parser.c -o parser.o
: g++ -shared -L/usr/lib64/R/lib -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -o rjson.so dump.o parser.o -L/usr/lib64/R/lib -lR
: g++  -I/usr/include/R/ -DNDEBUG  -I"/home/phrb/R/x86_64-pc-linux-gnu-library/3.4/Rcpp/include" -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c RcppExports.cpp -o RcppExports.o
: g++  -I/usr/include/R/ -DNDEBUG  -I"/home/phrb/R/x86_64-pc-linux-gnu-library/3.4/Rcpp/include" -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c fill.cpp -o fill.o
: g++  -I/usr/include/R/ -DNDEBUG  -I"/home/phrb/R/x86_64-pc-linux-gnu-library/3.4/Rcpp/include" -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c melt.cpp -o melt.o
: g++  -I/usr/include/R/ -DNDEBUG  -I"/home/phrb/R/x86_64-pc-linux-gnu-library/3.4/Rcpp/include" -D_FORTIFY_SOURCE=2   -fpic  -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt  -c simplifyPieces.cpp -o simplifyPieces.o
: g++ -shared -L/usr/lib64/R/lib -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -o tidyr.so RcppExports.o fill.o melt.o simplifyPieces.o -L/usr/lib64/R/lib -lR

***** Generating =csv= Files with the Data
#+HEADER: :results output :exports both :session *R*
#+HEADER: :var repository_dir=repository_dir
#+begin_src R
print(repository_dir)
#+end_src

#+RESULTS:
: [1] "/home/phrb/org/journal"

First, we configure libraries and initialize variables:

#+HEADER: :results output :exports both :session *R*
#+HEADER: :var repository_dir=repository_dir
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_csv_files.r
#+begin_src R

library(tidyr)
library(dplyr)
library(jsonlite)

runs         <- 10
tuning_time  <- 5400

repository   <- paste(repository_dir, "/legup-tuner", sep = "")
results      <- "post_place_and_route/py/results"

output_dir   <- paste(repository, results, "r_scripts/data", sep = "/")

experiments  <- c("default_stratixV_perf", "default_stratixV_perflat",
                  "default_stratixV_area", "default_stratixV_balanced")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

txt_measurements <- c("log_details.txt", "best_cycles_log.txt",
                      "best_fmax_log.txt", "best_lu_log.txt",
                      "best_pins_log.txt", "best_regs_log.txt",
                      "best_block_log.txt", "best_ram_log.txt",
                      "best_dps_log.txt")

json_configurations <- "best_log.json"

headers <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs", "Blocks",
             "RAM", "DPS")

#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
#+end_example

Then, we define the =cbind.fill= function, which merges columns and
fills missing rows with 'NA'.  This happens in this dataset because of
unsynchronized logging, where the last configuration was saved twice
in one of the log files. Will require to later clean the lines with
'NA's.

#+HEADER: :results output :exports both :session *R*
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_csv_files.r
#+begin_src R
#
# Function from:
#
#    https://stackoverflow.com/questions/7962267/cbind-a-df-with-an-empty-df-cbind-fill
#
#
cbind.fill <- function(...){
    nm <- list(...)
    nm <- lapply(nm, as.matrix)
    n <- max(sapply(nm, nrow))
    do.call(cbind, lapply(nm, function (x)
        rbind(x, matrix(, n-nrow(x), ncol(x)))))
}

#+end_src

#+RESULTS:

Now we defined the =generate_csv_files= function,
which will load all data and create easily-importable
=csv= files:

#+HEADER: :results output :exports both :session *R*
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_csv_files.r
#+begin_src R
generate_csv_files <- function() {
    dir.create(output_dir)

    for (experiment in experiments) {
        dir.create(paste(output_dir, strsplit(experiment, "_")[[1]][3], sep = "/"))

        for (application in applications) {
            data <- data.frame()

            for (iteration in 1:runs) {
                target_file <- (paste(repository, results, experiment,
                                    paste(application, tuning_time, iteration,
                                            sep = "_"), json_configurations,
                                    sep = "/"))

                if (file.exists(target_file)) {
                    configuration <- fromJSON(target_file)
                }

                columns <- data.frame()

                for (measurement in txt_measurements) {
                    target_file <- paste(repository, results, experiment,
                                        paste(application, tuning_time, iteration,
                                            sep = "_"), measurement,
                                        sep = "/")

                    if (file.exists(target_file)) {
                        new_column <- read.table(target_file, header = FALSE)[2]

                        if (ncol(columns) == 0) {
                            columns <- new_column
                        } else {
                            columns = cbind.fill(columns, new_column)
                        }
                    }
                }

                if (ncol(columns) != 0) {
                    colnames(columns) <- headers

                    columns = cbind.fill(configuration, columns)

                    if (nrow(data) == 0) {
                        data <- columns
                    } else {
                        data = bind_rows(as.data.frame(data),
                                        as.data.frame(columns))
                    }
                }
            }

            data <- data[complete.cases(data), ]

            write.csv(data, file = paste(paste(output_dir, strsplit(experiment,
                                                                    "_")[[1]][3],
                                            application, sep = "/"), ".csv",
                                        sep = ""))
        }
    }
}

#+end_src

#+RESULTS:

Now, we can simply run the =generate_csv_files= function:

#+HEADER: :results output :exports both :session *R*
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_csv_files.r
#+begin_src R
generate_csv_files()
#+end_src

#+RESULTS:
: There were 50 or more warnings (use warnings() to see the first 50)

**** Arnaud's Lecture on Linear Regression
The slides and code are hosted at
[[https://github.com/alegrand/SMPE][GitHub]].
*** [2017-12-08 Fri]
- Finish the data frames for FPGA data ([[Creating a Data Frame for FPGA Autotuning Samples][Main Section]])
**** Analysing FPGA Autotuning Samples            :R:Code:FPGA:Autotuning:
The generated =csv= files, made in [[Creating a Data Frame for FPGA Autotuning Samples][this section]], live in the [[https://github.com/phrb/legup-tuner/tree/master/post_place_and_route/py/results/r_scripts/data][repository]],
and are organized by *experiment* and CHStone *application*. The
*experiments* are the autotuning runs targeting different optimization
objectives. The *applications* are the different programs that were
autotuned.

It makes sense to combine data from different *experiments*, for a
same *application*, because the search space is the same and the
individual hardware metrics refer to the same FPGA circuit.

The =WNS= column is not directly comparable between different
*experiments*, even for the same *application*, because it represents a
different computation over the absolute metric values for each
*application*.  To compare =WNS= columns it would be necessary to
recompute =WNS= with different weights using the other hardware metrics.

Combining data from different *applications* would be more complicated.
The search spaces are not the same, but the *target FPGA* is the same.
We could try to understand some property of the hardware by looking
at the variability of the hardware metrics.

***** Multivariate Analysis
Implementing some ideas from [[https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html][The Little Book of R for Multivariate
Analysis]].

****** Introduction
To run the code in this section you first need to clone the repository
to get the data and the R scripts:

#+call: update_legup_tuner()

****** Summary Statistics
First, we will combine all *experiments* with the *dfdiv* application. In
this case, the =WNS= columns are not directly comparable so I am not
removing the rows where ~WNS == Inf~. This indicates a penalty that
happened when there was some problem during HLS, synthesis, or
testing. The following script, hosted at [[https://raw.githubusercontent.com/phrb/legup-tuner/master/post_place_and_route/py/results/r_scripts/mean_sd.r][GitHub]], will print the *mean*
and *standard deviation* for the FPGA *hardware metrics* and *WNS*.

First, let's define the necessary variables and import the
=dplyr= library:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :var repository_dir=repository_dir
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/mean_sd.r
#+BEGIN_SRC R

library(dplyr)

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

experiments <- c("balanced", "area", "perf", "perflat")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

#+END_SRC

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
#+end_example


Now, we load the data into two data frames. The =data= data frame
contains all lines, including the ones with ~WNS == Inf~, the =clean_data=
data frame contains the clean samples.  Note that we are merging all
*experiments* for a single *application* in this case.

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/mean_sd.r
#+BEGIN_SRC R
data       <- data.frame()
clean_data <- data.frame()

application <- applications[2]

for (experiment in experiments) {
    new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                               experiment, paste(application,
                                                 ".csv",
                                                 sep = ""),
                               sep = "/"),
                         header = TRUE, sep = ",")

    new_data       <- as.data.frame(new_data)
    new_clean_data <- new_data[is.finite(new_data$WNS),]

    if (ncol(data) == 0) {
        data <- new_data
    } else {
        data <- rbind(data, new_data)
    }

    if (ncol(clean_data) == 0) {
        clean_data <- new_clean_data
    } else {
        clean_data <- rbind(clean_data, new_clean_data)
    }
}

#+END_SRC

#+RESULTS:

Now, we get the indices of the =hardware_metrics= for which we want
to compute the mean and standard deviation in this dataset:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/mean_sd.r
#+BEGIN_SRC R
names <- c("WNS","RAM")

idx <- match(names, names(data))

#+END_SRC

#+RESULTS:

By looking at the data with the ~WNS == Inf~ rows we get wrong values
for mean and standard deviation because repeated samples are in the
data frame, strengthening their contribution contribution to the final
values:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/mean_sd.r
#+BEGIN_SRC R
print("Data with 'WNS == Inf' rows:")

print("Mean:")
sapply(data[idx[1]:idx[2]], mean)

print("Standard Deviation:")
sapply(data[idx[1]:idx[2]], sd)

#+END_SRC

#+RESULTS:
#+begin_example
[1] "Data with 'WNS == Inf' rows:"
[1] "Mean:"
         WNS       Cycles         FMax          LUs         Pins         Regs 
         Inf  587.1083650   24.1486882    1.0000000    3.2813688 4153.5665399 
      Blocks          RAM 
   0.8992395    0.8992395
[1] "Standard Deviation:"
         WNS       Cycles         FMax          LUs         Pins         Regs 
         NaN  227.1528406   13.1032536    0.0000000    0.4500950 1123.2949061 
      Blocks          RAM 
   0.3012978    0.3012978
#+end_example

We can compute the correct values by using the =clean_data= data frame:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/mean_sd.r
#+BEGIN_SRC R
print("Data without 'WNS == Inf' rows:")

print("Mean:")
sapply(clean_data[idx[1]:idx[2]], mean)

print("Standard Deviation:")
sapply(clean_data[idx[1]:idx[2]], sd)
#+END_SRC

#+RESULTS:
#+begin_example
[1] "Data without 'WNS == Inf' rows:"
[1] "Mean:"
         WNS       Cycles         FMax          LUs         Pins         Regs 
   1.0651531  564.3596215   23.6492429    1.0000000    3.2492114 4032.5268139 
      Blocks          RAM 
   0.9116719    0.9116719
[1] "Standard Deviation:"
         WNS       Cycles         FMax          LUs         Pins         Regs 
   0.3079517  207.3545319   12.8765244    0.0000000    0.4332403 1049.1423668 
      Blocks          RAM 
   0.2842201    0.2842201
#+end_example

****** Attempts at Computing Correlations
Following [[https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html#calculating-correlations-for-multivariate-data][this guide]] I attempted to compute and plot the largest
correlations between *parameters* and *hardware metrics*.  The largest
correlations might not be really signficant, because the relationship
between variables might not be linear, as illustrated [[http://www.dummies.com/education/math/statistics/how-to-interpret-a-correlation-coefficient-r/][here]]. Therefore,
the following script plots the 30 largest correlations, for all
*applications* in all *experiments*, so that we can look at the
relationships between variables. The script also generates =csv= files
with the 120 strongest correlations. The script is hosted at
[[https://raw.githubusercontent.com/phrb/legup-tuner/master/post_place_and_route/py/results/r_scripts/correlations.r][GitHub]].

First, we will import the dependencies, set the graphics output,
and define paths:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :var repository_dir=repository_dir
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/correlations.r
#+begin_src R

library(dplyr)

setEPS()

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

plot_dir <- c(repository_dir,
              "/legup-tuner/",
              "post_place_and_route/py/results/r_scripts/",
              "correlations")

experiments <- c("balanced", "area", "perf", "perflat")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

#+end_src

#+RESULTS:

Then we will define two functions. The =sorted_correlations= function
gives us the sorted correlation matrices for *parameters* and *hardware
metrics*. The =plot_application_correlations= function plots the strongest
30 correlations between *parameters* and *hardware metrics*, and
writes the 120 strongest correlations to =csv= files:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/correlations.r
#+begin_src R
#
# Function adapted from:
#
#   https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html#calculating-correlations-for-multivariate-data
#
sorted_correlations <- function(data, datapoints) {
    cormatrix <- cor(data)

    diag(cormatrix) <- 0
    cormatrix[lower.tri(cormatrix)] <- 0

    fm <- as.data.frame(as.table(cormatrix))

    names(fm) <- c("First.Variable", "Second.Variable","Correlation")

    hardware_metrics <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs",
                          "Blocks", "RAM", "DPS")

    #
    # Restricting comparisons to correlations that contain a hardware metric
    #
    fm <- dplyr::filter(fm, grepl(paste(hardware_metrics, collapse = "|"),
                                  fm$Second.Variable))

    head(fm[order(abs(fm$Correlation), decreasing = T), ], n = datapoints)
}

plot_application_correlations <- function() {
    dir.create(paste(plot_dir, collapse = ""))

    for (application in applications) {
        data       <- data.frame()
        clean_data <- data.frame()

        for (experiment in experiments) {
            new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                                       experiment, paste(application,
                                                         ".csv",
                                                         sep = ""),
                                       sep = "/"),
                                 header = TRUE, sep = ",")

            new_data <- as.data.frame(new_data)
            new_data <- new_data[is.finite(new_data$WNS),]

            if (ncol(data) == 0) {
                data <- new_data
            } else {
                data <- rbind(data, new_data)
            }
        }

        data  <- sapply(data, as.numeric)

        correlation <- sorted_correlations(data, 120)

        print(paste("Generating 120 strongest correlations for '", application,
                    "'...", sep = ""))

        write.csv(correlation, file = paste(paste(plot_dir, collapse = ""),
                                            paste("correlations_", application,
                                                  ".csv", sep = ""), sep = "/"))
        print(paste("Generating scatter plots of the 30 strongest correlations for '",
                    application, "'...", sep = ""))

        print(paste(paste("CSV generated at ", 
                          paste(plot_dir, collapse = ""),
                          sep = ""), paste("correlations_", application,
                                           ".csv", sep = ""),
                    sep = "/"))

        short_correlation <- correlation[1:30, ]

        postscript(paste(paste(plot_dir, collapse = ""), paste("correlations_",
                                                               application,
                                                               ".eps",
                                                               sep = ""),
                         sep = "/"),
                   width = 16, height = 11)

        old.par <- par(mfrow = c(5, 6))

        for (i in 1:nrow(short_correlation)) {
            first  <- as.character(short_correlation[i, 'First.Variable'])
            second <- as.character(short_correlation[i, 'Second.Variable'])

            plot(data[, first], data[, second], xlab = first, ylab = second)
        }

        print(paste(paste("Plot generated at ",
                          paste(plot_dir, collapse = ""),
                          sep = ""), paste("correlations_", application,
                                           ".eps", sep = ""),
                    sep = "/"))

        par(old.par)
        dev.off()
    }
}

#+end_src

#+RESULTS:

Now we can run =plot_application_correlations= and generate the files:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/correlations.r
#+begin_src R
plot_application_correlations()
#+end_src

#+RESULTS:
#+begin_example
[1] "Generating 120 strongest correlations for 'dfadd'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'dfadd'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfadd.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfadd.eps"
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfdiv.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfdiv.eps"
[1] "Generating 120 strongest correlations for 'dfmul'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'dfmul'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfmul.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfmul.eps"
[1] "Generating 120 strongest correlations for 'sha'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'sha'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_sha.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_sha.eps"
[1] "Generating 120 strongest correlations for 'motion'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'motion'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_motion.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_motion.eps"
[1] "Generating 120 strongest correlations for 'adpcm'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'adpcm'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_adpcm.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_adpcm.eps"
[1] "Generating 120 strongest correlations for 'dfsin'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'dfsin'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfsin.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfsin.eps"
[1] "Generating 120 strongest correlations for 'aes'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'aes'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_aes.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_aes.eps"
[1] "Generating 120 strongest correlations for 'blowfish'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'blowfish'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_blowfish.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_blowfish.eps"
[1] "Generating 120 strongest correlations for 'gsm'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'gsm'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_gsm.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_gsm.eps"
[1] "Generating 120 strongest correlations for 'mips'..."
[1] "Generating scatter plots of the 30 strongest correlations for 'mips'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_mips.csv"
[1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_mips.eps"
There were 26 warnings (use warnings() to see them)
#+end_example

Open one of these =eps= files with:

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/correlations_dfdiv.eps&
#+end_src

#+RESULTS:

*** [2017-12-11 Mon]
**** Reading the [[file:~/Dropbox/papers/autotuning/cronsioe2013boast.pdf][BOAST]] paper
- BOAST: Bringing Optimization through Automatic
  Source-to-source Transformations
- Optimizes loop structures for different HPC architectures
  - Loop unrolling and tiling
***** Questions
1. Why loop tiling with PIPS was not performed and measured?
2. What would be the improvements of appling unrolling and
   tiling to the same loop?
3. Can "search-based" strategies help for larger loops?
2. What would be the improvements of appling unrolling and
   tiling to the same loop?
3. Can "search-based" strategies help for larger loops?
***** Optimization Methodology
- Compare BOAST with PIPS, another code transformation tool
- Benchmark transformed code to find the best version
  - Objective: Perform loop unrolling and tiling using PIPS
    - Did not perform loop tiling with PIPS
  - Independently measured hardware counters
  - Hardware counters:
    - Cache accesses and misses
    - Instruction cache misses
    - TLB data and instruction misses
    - Total CPU cycles
**** Attempts at PCA ([[Analysing FPGA Autotuning Samples][Main Section]])       :R:Code:FPGA:Autotuning:DataVis:
Make sure you have the data:

#+call: update_legup_tuner()

#+RESULTS:
: Already up to date.

Following [[https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html#principal-component-analysis][this guide]] I attempted to perform Principal Component
Analysis for the data combining all *experiments* for all
*applications*. The following script generates [[https://stat.ethz.ch/R-manual/R-devel/library/stats/html/screeplot.html][scree plots]] for the PCA
of each *application*. The script is hosted at [[https://raw.githubusercontent.com/phrb/legup-tuner/master/post_place_and_route/py/results/r_scripts/pca.r][GitHub]].

Initial setup:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :var repository_dir=repository_dir
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/pca.r
#+BEGIN_SRC R

library(dplyr)

setEPS()

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

plot_dir <- c(repository_dir,
              "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "scree_plots")

experiments <- c("balanced", "area", "perf", "perflat")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

hardware_metrics <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs", "Blocks",
                      "RAM", "DPS")

#+END_SRC

#+RESULTS:

Now, we define the =load_data= and the =plot_scree_pca= functions:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/pca.r
#+BEGIN_SRC R
load_data <- function(application, experiment) {
    return(as.data.frame(read.csv(paste(paste(csv_dir, collapse = ""),
                                        experiment, paste(application,
                                                          ".csv",
                                                          sep = ""),
                                        sep = "/"),
                                  header = TRUE, sep = ",")))
}

plot_scree_pca <- function() {
    dir.create(paste(plot_dir, collapse = ""))

    for (application in applications) {
        data <- data.frame()

        for (experiment in experiments) {
            new_data <- load_data(application, experiment)
            new_data <- new_data[is.finite(new_data$WNS),]

            if (ncol(data) == 0) {
                data <- new_data
            } else {
                data <- rbind(data, new_data)
            }
        }

        headers <- names(data)
        data  <- as.data.frame(sapply(data, as.numeric))

        standardised_data <- as.data.frame(scale(data[, !(names(data) %in% hardware_metrics)]))

        data.pca <- prcomp(t(na.omit(t(standardised_data))))

        print(paste("Generating scree plots of PCA for '",
                    application, "'...", sep = ""))

        postscript(paste(paste(plot_dir, collapse = ""), paste("scree_",
                                                               application,
                                                               ".eps",
                                                               sep = ""),
                         sep = "/"),
                   width = 16, height = 11)

        screeplot(data.pca, type = "lines")

        dev.off()
    }
}

#+END_SRC

#+RESULTS:

Now, we run =plot_scree_pca= to generate the scree plots:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/pca.r
#+begin_src R
plot_scree_pca()
#+end_src

#+RESULTS:
#+begin_example
[1] "Generating scree plots of PCA for 'dfadd'..."
[1] "Generating scree plots of PCA for 'dfdiv'..."
[1] "Generating scree plots of PCA for 'dfmul'..."
[1] "Generating scree plots of PCA for 'sha'..."
[1] "Generating scree plots of PCA for 'motion'..."
[1] "Generating scree plots of PCA for 'adpcm'..."
[1] "Generating scree plots of PCA for 'dfsin'..."
[1] "Generating scree plots of PCA for 'aes'..."
[1] "Generating scree plots of PCA for 'blowfish'..."
[1] "Generating scree plots of PCA for 'gsm'..."
[1] "Generating scree plots of PCA for 'mips'..."
There were 15 warnings (use warnings() to see them)
#+end_example

Open one of these =eps= files with:

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/scree_plots/scree_dfdiv.eps&
#+end_src

#+RESULTS:

**** Looking at data with Arnaud. Not sure where we were heading though. :R:Code:FPGA:Autotuning:
Make sure you have the data:

#+call: update_legup_tuner()

#+RESULTS:
: Already up to date.

Define the =load_data= function. This function receives lists of
*experiments*, an *application* and a directory containing *csv* files with
the data sets. The function returns a *data frame* with merged data for
an *application* across all *experiments*:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+HEADER: :var repository_dir=repository_dir
#+BEGIN_SRC R

load_data <- function(application, experiments, csv_dir) {
    data <- data.frame()

    for (experiment in experiments) {
        new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                                    experiment, paste(application,
                                                        ".csv",
                                                        sep = ""),
                                    sep = "/"),
                                header = TRUE, sep = ",")

        new_data <- new_data[is.finite(new_data$WNS),]
        new_data <- as.data.frame(new_data)

        if (ncol(data) == 0) {
            data <- new_data
        } else {
            data <- rbind(data, new_data)
        }
    }

    headers <- names(data)
    data    <- as.data.frame(sapply(data, as.numeric))
    data    <- t(na.omit(t(data)))
    return(as.data.frame(data))
}

#+END_SRC

#+RESULTS:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

plot_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "plots")

experiments <- c("balanced", "area", "perf", "perflat")


applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

hardware_metrics <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs",
                      "Blocks", "RAM", "DPS")
#+end_src

#+RESULTS:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R
application <- applications[2]
data        <- load_data(application, experiments, csv_dir)

#+end_src

#+RESULTS:
: Warning message:
: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion

Checking the data:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R
dim(data)
str(data, list.len = 999)

#+end_src

#+RESULTS:
#+begin_example
[1] 317 150
'data.frame':	317 obs. of  150 variables:
 $ X                                           : num  1 2 5 7 8 9 10 12 13 14 ...
 $ set_operation_latency.altfp_divide_16       : num  33 33 33 33 33 33 33 33 33 33 ...
 $ set_resource_constraint.signed_divide_16    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.mem_dual_port         : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.altfp_truncate_16     : num  3 3 3 3 3 3 4 4 4 4 ...
 $ set_resource_constraint.altfp_multiply_64   : num  1 1 1 1 1 1 1 3 3 3 ...
 $ set_parameter.NO_ROMS                       : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.signed_multiply_8   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_fptosi          : num  6 6 6 6 6 6 6 6 6 6 ...
 $ set_resource_constraint.unsigned_modulus_16 : num  1 1 1 1 1 1 5 5 5 5 ...
 $ set_resource_constraint.unsigned_multiply_32: num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.altfp_add_8         : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_multiply_32  : num  1 1 1 1 3 3 3 3 3 3 ...
 $ set_resource_constraint.unsigned_add_32     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_divide_16    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_multiply_16  : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_modulus_32     : num  1 1 1 1 1 1 0 0 0 0 ...
 $ set_operation_latency.signed_multiply_32    : num  1 1 1 1 1 1 5 5 5 5 ...
 $ set_operation_latency.altfp_add_64          : num  14 14 14 14 14 14 14 4 4 2 ...
 $ set_operation_latency.altfp_subtract_32     : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_parameter.PS_MIN_SIZE                   : num  1 1 1 1 1 1 1 1 1 4 ...
 $ set_resource_constraint.altfp_add_64        : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_multiply_64     : num  11 11 11 11 11 11 11 11 11 11 ...
 $ set_operation_latency.unsigned_multiply_8   : num  1 1 1 1 1 1 1 1 1 5 ...
 $ set_operation_latency.unsigned_add_32       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_truncate_8      : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_resource_constraint.signed_multiply_64  : num  1 1 1 1 6 6 6 6 6 6 ...
 $ set_operation_latency.signed_divide_64      : num  1 1 1 1 1 1 2 6 6 6 ...
 $ set_resource_constraint.altfp_subtract_16   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.MB_MINIMIZE_HW                : num  2 2 2 2 2 2 2 2 2 1 ...
 $ set_parameter.PATTERN_SHARE_ADD             : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_resource_constraint.signed_add_16       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.MULTIPLIER_NO_CHAIN           : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.unsigned_multiply_8 : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.reg                   : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.unsigned_modulus_64   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.unsigned_divide_16  : num  1 1 1 1 1 1 1 7 7 8 ...
 $ set_resource_constraint.unsigned_divide_64  : num  1 1 1 1 1 1 7 7 7 7 ...
 $ set_resource_constraint.signed_divide_8     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_extend_32       : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.altfp_add_16        : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_modulus_32   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.DONT_CHAIN_GET_ELEM_PTR       : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.unsigned_modulus_64 : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_modulus_8    : num  1 1 1 1 1 1 0 0 0 0 ...
 $ set_resource_constraint.mem_dual_port       : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_parameter.SDC_MULTIPUMP                 : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.signed_multiply_16    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_multiply_16     : num  11 11 11 11 11 11 6 6 6 6 ...
 $ set_operation_latency.unsigned_modulus_16   : num  1 1 1 1 4 4 6 6 6 6 ...
 $ set_resource_constraint.altfp_subtract_64   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_add_8          : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_add_16       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.PATTERN_SHARE_SUB             : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_parameter.CLOCK_PERIOD                  : num  10 10 10 10 24 24 24 24 24 20 ...
 $ set_resource_constraint.altfp_subtract_8    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.NO_LOOP_PIPELINING            : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.altfp_divide_64       : num  64 64 64 64 64 64 64 64 64 64 ...
 $ set_parameter.INCREMENTAL_SDC               : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.signed_divide_8       : num  1 1 1 1 4 4 4 4 4 4 ...
 $ set_resource_constraint.altfp_multiply_8    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.unsigned_multiply_16: num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_modulus_64     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_multiply_64  : num  1 1 1 1 1 1 3 3 3 3 ...
 $ set_resource_constraint.unsigned_multiply_64: num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_add_32         : num  1 1 1 1 1 1 1 1 1 4 ...
 $ set_parameter.DISABLE_REG_SHARING           : num  2 2 2 2 2 2 2 1 1 1 ...
 $ set_operation_latency.unsigned_divide_64    : num  1 1 1 1 1 1 5 7 7 7 ...
 $ set_resource_constraint.unsigned_modulus_8  : num  1 1 1 1 1 1 4 4 4 4 ...
 $ set_combine_basicblock                      : num  0 0 0 0 0 0 0 0 0 0 ...
 $ set_parameter.ENABLE_PATTERN_SHARING        : num  2 2 2 2 2 2 2 1 1 1 ...
 $ set_parameter.PIPELINE_RESOURCE_SHARING     : num  1 1 1 1 1 1 2 2 2 2 ...
 $ set_parameter.MULTIPUMPING                  : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.signed_add_32       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_add_32          : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_resource_constraint.altfp_divide_64     : num  1 1 1 1 3 3 2 2 2 2 ...
 $ set_operation_latency.signed_modulus_8      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.PIPELINE_ALL                  : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.altfp_add_32        : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.PS_MIN_WIDTH                  : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.altfp_subtract_8      : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_operation_latency.signed_multiply_8     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_extend_64       : num  2 2 2 2 7 7 7 7 7 7 ...
 $ set_operation_latency.local_mem_dual_port   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_subtract_64     : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_resource_constraint.signed_divide_32    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_multiply_32  : num  1 1 1 1 1 1 7 6 6 6 ...
 $ set_operation_latency.signed_divide_16      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_multiply_64    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.PATTERN_SHARE_BITOPS          : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_resource_constraint.signed_add_8        : num  1 1 1 1 4 4 4 4 4 4 ...
 $ set_parameter.SDC_PRIORITY                  : num  1 1 1 1 1 1 1 1 1 2 ...
 $ set_resource_constraint.altfp_multiply_32   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.altfp_divide_16     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_modulus_16   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_add_64         : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.unsigned_modulus_32 : num  1 1 1 1 7 7 7 7 7 7 ...
 $ set_operation_latency.altfp_multiply_8      : num  11 11 11 11 11 11 11 11 11 2 ...
 $ set_resource_constraint.signed_modulus_64   : num  1 1 1 1 1 1 1 7 7 7 ...
 $ set_operation_latency.signed_comp_o         : num  1 1 1 1 5 5 5 5 5 5 ...
 $ set_parameter.PS_MAX_SIZE                   : num  10 10 10 10 10 10 10 10 10 10 ...
 $ set_operation_latency.signed_comp_u         : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.DUAL_PORT_BINDING             : num  1 1 1 1 1 1 1 2 2 2 ...
 $ set_resource_constraint.unsigned_divide_32  : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_multiply_32     : num  11 11 11 11 11 11 11 11 11 11 ...
 $ set_operation_latency.altfp_add_16          : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_operation_latency.altfp_truncate_32     : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_operation_latency.unsigned_add_64       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_add_16         : num  1 1 1 1 1 1 1 2 2 6 ...
 $ set_parameter.PS_BIT_DIFF_THRESHOLD         : num  10 10 10 10 10 10 10 10 10 14 ...
 $ set_operation_latency.altfp_add_8           : num  14 14 14 14 14 14 14 14 14 1 ...
 $ set_operation_latency.altfp_divide_32       : num  33 33 33 33 33 33 33 33 33 33 ...
 $ set_operation_latency.altfp_sitofp          : num  6 6 6 6 6 6 6 6 6 6 ...
 $ set_resource_constraint.unsigned_add_64     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_add_64       : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.signed_divide_32      : num  1 1 1 1 7 7 4 4 4 4 ...
 $ set_parameter.MODULO_SCHEDULER              : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_resource_constraint.unsigned_add_16     : num  1 1 1 1 1 1 1 6 6 6 ...
 $ set_operation_latency.altfp_divide_8        : num  33 33 33 33 33 33 33 33 33 33 ...
 $ set_parameter.EXPLICIT_LPM_MULTS            : num  2 2 2 2 2 2 2 2 2 1 ...
 $ set_parameter.MB_MAX_BACK_PASSES            : num  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ...
 $ set_operation_latency.signed_modulus_16     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_multiply_16  : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_extend_8        : num  2 2 2 2 2 2 2 2 2 2 ...
 $ set_operation_latency.unsigned_divide_32    : num  1 1 1 1 1 1 1 1 1 6 ...
 $ set_operation_latency.altfp_subtract_16     : num  14 14 14 14 14 14 14 14 14 14 ...
 $ set_resource_constraint.unsigned_add_8      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_parameter.PATTERN_SHARE_SHIFT           : num  3 3 3 3 3 3 3 3 3 3 ...
 $ set_operation_latency.unsigned_divide_8     : num  1 1 1 1 7 7 7 7 7 7 ...
 $ set_resource_constraint.altfp_multiply_16   : num  1 1 1 1 1 1 1 8 8 8 ...
 $ set_resource_constraint.altfp_divide_32     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.unsigned_divide_8   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_truncate_64     : num  3 3 3 3 0 0 0 3 3 3 ...
 $ set_operation_latency.unsigned_modulus_32   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.unsigned_add_8        : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_operation_latency.altfp_extend_16       : num  2 2 2 2 1 1 1 1 1 1 ...
 $ set_resource_constraint.altfp_divide_8      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.altfp_subtract_32   : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.signed_modulus_8    : num  1 1 1 1 1 1 5 5 5 5 ...
 $ set_resource_constraint.signed_divide_64    : num  1 1 1 1 1 1 1 1 1 1 ...
 $ set_resource_constraint.shared_mem_dual_port: num  1 1 1 1 5 5 5 5 5 5 ...
 $ WNS                                         : num  1 1 1.117 1.86 0.991 ...
 $ Cycles                                      : num  486 486 486 486 458 458 554 602 602 794 ...
 $ FMax                                        : num  15.7 15.7 15.7 15.7 15.9 ...
 $ LUs                                         : num  1 1 1 1 1 1 1 1 1 1 ...
 $ Pins                                        : num  3 3 3 3 3 3 3 3 3 3 ...
 $ Regs                                        : num  3949 3949 3949 3949 3968 ...
 $ Blocks                                      : num  1 1 1 1 1 1 1 1 1 1 ...
 $ RAM                                         : num  1 1 1 1 1 1 1 1 1 1 ...
 $ DPS                                         : num  16 16 16 16 16 16 16 16 16 5 ...
#+end_example

Plotting =pairs= with =GGally=:

#+HEADER: :results output graphics :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+HEADER: :file (org-babel-temp-file "figure" ".png")
#+HEADER: :width 600 :height 400
#+begin_src R
library(GGally)

hw_metrics    <- tail(names(data), n = 9)
hw_parameters <- head(names(data), n = 151 - 9)

dir.create(paste(plot_dir, collapse = ""))

setEPS()

postscript(paste(paste(plot_dir, collapse = ""), paste("ggpairs_",
                                                       application,
                                                       ".eps",
                                                       sep = ""),
                 sep = "/"),
           width = 16, height = 16)

ggpairs_plot <- ggpairs(data, columns = hw_metrics)

print(ggpairs_plot)

dev.off()

ggpairs_plot

#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure47883XC.png]]

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/plots/ggpairs_dfdiv.eps&
#+end_src

#+RESULTS:

Checking correlations of 5 random *parameters* with the *hardware metrics*:

#+HEADER: :results output graphics :file (org-babel-temp-file "figure" ".png")
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+HEADER: :exports both :width 1600 :height 1400 :session *R*
#+begin_src R

my_plot <- plot(data[c(sample(hw_parameters, size = 5), hw_metrics)])

setEPS()

postscript(paste(paste(plot_dir, collapse = ""), paste("random_5_corr_",
                                                       application,
                                                       ".eps",
                                                       sep = ""),
                 sep = "/"),
           width = 16, height = 16)

plot(data[c(sample(hw_parameters, size = 5), hw_metrics)])

dev.off()

#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure4788EiI.png]]

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/plots/random_5_corr_dfdiv.eps&
#+end_src

#+RESULTS:

Plotting =ggpairs= for 5 random *parameters* and all *hardware metrics*:

#+HEADER: :results output graphics :file (org-babel-temp-file "figure" ".png")
#+HEADER: :exports both :width 1600 :height 1400 :session *R*
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R
ggpairs(data[c(sample(hw_parameters, size = 5), hw_metrics)])
#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure4788RsO.png]]

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output :session *R* :exports both
lm(data = head(data[!names(data) %in% (hw_metrics[hw_metrics != "FMax"])]),
   FMax ~ .)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = FMax ~ ., data = head(data[!names(data) %in% (hw_metrics[hw_metrics != 
    "FMax"])]))

Coefficients:
                                 (Intercept)  
                                   1.560e+01  
                                           X  
                                  -1.973e-15  
       set_operation_latency.altfp_divide_16  
                                          NA  
    set_resource_constraint.signed_divide_16  
                                          NA  
         set_operation_latency.mem_dual_port  
                                          NA  
     set_operation_latency.altfp_truncate_16  
                                          NA  
   set_resource_constraint.altfp_multiply_64  
                                          NA  
                       set_parameter.NO_ROMS  
                                          NA  
   set_resource_constraint.signed_multiply_8  
                                          NA  
          set_operation_latency.altfp_fptosi  
                                          NA  
 set_resource_constraint.unsigned_modulus_16  
                                          NA  
set_resource_constraint.unsigned_multiply_32  
                                          NA  
         set_resource_constraint.altfp_add_8  
                                          NA  
  set_operation_latency.unsigned_multiply_32  
                                   1.000e-01  
     set_resource_constraint.unsigned_add_32  
                                          NA  
    set_operation_latency.unsigned_divide_16  
                                          NA  
  set_resource_constraint.signed_multiply_16  
                                          NA  
     set_operation_latency.signed_modulus_32  
                                          NA  
    set_operation_latency.signed_multiply_32  
                                          NA  
          set_operation_latency.altfp_add_64  
                                          NA  
     set_operation_latency.altfp_subtract_32  
                                          NA  
                   set_parameter.PS_MIN_SIZE  
                                          NA  
        set_resource_constraint.altfp_add_64  
                                          NA  
     set_operation_latency.altfp_multiply_64  
                                          NA  
   set_operation_latency.unsigned_multiply_8  
                                          NA  
       set_operation_latency.unsigned_add_32  
                                          NA  
      set_operation_latency.altfp_truncate_8  
                                          NA  
  set_resource_constraint.signed_multiply_64  
                                          NA  
      set_operation_latency.signed_divide_64  
                                          NA  
   set_resource_constraint.altfp_subtract_16  
                                          NA  
                set_parameter.MB_MINIMIZE_HW  
                                          NA  
             set_parameter.PATTERN_SHARE_ADD  
                                          NA  
       set_resource_constraint.signed_add_16  
                                          NA  
           set_parameter.MULTIPLIER_NO_CHAIN  
                                          NA  
 set_resource_constraint.unsigned_multiply_8  
                                          NA  
                   set_operation_latency.reg  
                                          NA  
   set_operation_latency.unsigned_modulus_64  
                                          NA  
  set_resource_constraint.unsigned_divide_16  
                                          NA  
  set_resource_constraint.unsigned_divide_64  
                                          NA  
     set_resource_constraint.signed_divide_8  
                                          NA  
       set_operation_latency.altfp_extend_32  
                                          NA  
        set_resource_constraint.altfp_add_16  
                                          NA  
   set_resource_constraint.signed_modulus_32  
                                          NA  
       set_parameter.DONT_CHAIN_GET_ELEM_PTR  
                                          NA  
 set_resource_constraint.unsigned_modulus_64  
                                          NA  
    set_operation_latency.unsigned_modulus_8  
                                          NA  
       set_resource_constraint.mem_dual_port  
                                          NA  
                 set_parameter.SDC_MULTIPUMP  
                                          NA  
    set_operation_latency.signed_multiply_16  
                                          NA  
     set_operation_latency.altfp_multiply_16  
                                          NA  
   set_operation_latency.unsigned_modulus_16  
                                          NA  
   set_resource_constraint.altfp_subtract_64  
                                          NA  
          set_operation_latency.signed_add_8  
                                          NA  
       set_operation_latency.unsigned_add_16  
                                          NA  
             set_parameter.PATTERN_SHARE_SUB  
                                          NA  
                  set_parameter.CLOCK_PERIOD  
                                          NA  
    set_resource_constraint.altfp_subtract_8  
                                          NA  
            set_parameter.NO_LOOP_PIPELINING  
                                          NA  
       set_operation_latency.altfp_divide_64  
                                          NA  
               set_parameter.INCREMENTAL_SDC  
                                          NA  
       set_operation_latency.signed_divide_8  
                                          NA  
    set_resource_constraint.altfp_multiply_8  
                                          NA  
set_resource_constraint.unsigned_multiply_16  
                                          NA  
     set_operation_latency.signed_modulus_64  
                                          NA  
  set_operation_latency.unsigned_multiply_64  
                                          NA  
set_resource_constraint.unsigned_multiply_64  
                                          NA  
         set_operation_latency.signed_add_32  
                                          NA  
           set_parameter.DISABLE_REG_SHARING  
                                          NA  
    set_operation_latency.unsigned_divide_64  
                                          NA  
  set_resource_constraint.unsigned_modulus_8  
                                          NA  
                      set_combine_basicblock  
                                          NA  
        set_parameter.ENABLE_PATTERN_SHARING  
                                          NA  
     set_parameter.PIPELINE_RESOURCE_SHARING  
                                          NA  
                  set_parameter.MULTIPUMPING  
                                          NA  
       set_resource_constraint.signed_add_32  
                                          NA  
          set_operation_latency.altfp_add_32  
                                          NA  
     set_resource_constraint.altfp_divide_64  
                                          NA  
      set_operation_latency.signed_modulus_8  
                                          NA  
                  set_parameter.PIPELINE_ALL  
                                          NA  
        set_resource_constraint.altfp_add_32  
                                          NA  
                  set_parameter.PS_MIN_WIDTH  
                                          NA  
      set_operation_latency.altfp_subtract_8  
                                          NA  
     set_operation_latency.signed_multiply_8  
                                          NA  
       set_operation_latency.altfp_extend_64  
                                          NA  
   set_operation_latency.local_mem_dual_port  
                                          NA  
     set_operation_latency.altfp_subtract_64  
                                          NA  
    set_resource_constraint.signed_divide_32  
                                          NA  
  set_resource_constraint.signed_multiply_32  
                                          NA  
      set_operation_latency.signed_divide_16  
                                          NA  
    set_operation_latency.signed_multiply_64  
                                          NA  
          set_parameter.PATTERN_SHARE_BITOPS  
                                          NA  
        set_resource_constraint.signed_add_8  
                                          NA  
                  set_parameter.SDC_PRIORITY  
                                          NA  
   set_resource_constraint.altfp_multiply_32  
                                          NA  
     set_resource_constraint.altfp_divide_16  
                                          NA  
   set_resource_constraint.signed_modulus_16  
                                          NA  
         set_operation_latency.signed_add_64  
                                          NA  
 set_resource_constraint.unsigned_modulus_32  
                                          NA  
      set_operation_latency.altfp_multiply_8  
                                          NA  
   set_resource_constraint.signed_modulus_64  
                                          NA  
         set_operation_latency.signed_comp_o  
                                          NA  
                   set_parameter.PS_MAX_SIZE  
                                          NA  
         set_operation_latency.signed_comp_u  
                                          NA  
             set_parameter.DUAL_PORT_BINDING  
                                          NA  
  set_resource_constraint.unsigned_divide_32  
                                          NA  
     set_operation_latency.altfp_multiply_32  
                                          NA  
          set_operation_latency.altfp_add_16  
                                          NA  
     set_operation_latency.altfp_truncate_32  
                                          NA  
       set_operation_latency.unsigned_add_64  
                                          NA  
         set_operation_latency.signed_add_16  
                                          NA  
         set_parameter.PS_BIT_DIFF_THRESHOLD  
                                          NA  
           set_operation_latency.altfp_add_8  
                                          NA  
       set_operation_latency.altfp_divide_32  
                                          NA  
          set_operation_latency.altfp_sitofp  
                                          NA  
     set_resource_constraint.unsigned_add_64  
                                          NA  
       set_resource_constraint.signed_add_64  
                                          NA  
      set_operation_latency.signed_divide_32  
                                          NA  
              set_parameter.MODULO_SCHEDULER  
                                          NA  
     set_resource_constraint.unsigned_add_16  
                                          NA  
        set_operation_latency.altfp_divide_8  
                                          NA  
            set_parameter.EXPLICIT_LPM_MULTS  
                                          NA  
            set_parameter.MB_MAX_BACK_PASSES  
                                          NA  
     set_operation_latency.signed_modulus_16  
                                          NA  
  set_operation_latency.unsigned_multiply_16  
                                          NA  
        set_operation_latency.altfp_extend_8  
                                          NA  
    set_operation_latency.unsigned_divide_32  
                                          NA  
     set_operation_latency.altfp_subtract_16  
                                          NA  
      set_resource_constraint.unsigned_add_8  
                                          NA  
           set_parameter.PATTERN_SHARE_SHIFT  
                                          NA  
     set_operation_latency.unsigned_divide_8  
                                          NA  
   set_resource_constraint.altfp_multiply_16  
                                          NA  
     set_resource_constraint.altfp_divide_32  
                                          NA  
   set_resource_constraint.unsigned_divide_8  
                                          NA  
     set_operation_latency.altfp_truncate_64  
                                          NA  
   set_operation_latency.unsigned_modulus_32  
                                          NA  
        set_operation_latency.unsigned_add_8  
                                          NA  
       set_operation_latency.altfp_extend_16  
                                          NA  
      set_resource_constraint.altfp_divide_8  
                                          NA  
   set_resource_constraint.altfp_subtract_32  
                                          NA  
    set_resource_constraint.signed_modulus_8  
                                          NA  
    set_resource_constraint.signed_divide_64  
                                          NA  
set_resource_constraint.shared_mem_dual_port  
                                          NA
#+end_example

Damn, we need to get rid of "useless" parameters. Let's go dirty!

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output :session *R* :exports both
data_bak = data
#+end_src

#+RESULTS:

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output :session *R* :exports both
fixed_param = c()
for(i in names(data)) {
    if(dim(unique(data[i]))[1]==1) { fixed_param = c(fixed_param,i) }
}
fixed_param;
for(i in names(data)) {
    data = data[!is.na(data[,i]),]
    data = data[!is.infinite(data[,i]),]
#    data[,i]=as.numeric(data[,i])
}
data = data[!names(data) %in% (c(fixed_param,hw_metrics[hw_metrics!="FMax"]))]
dim(data)
#+end_src

#+RESULTS:
: [1] "LUs"
: [1] 317 142

#+begin_src R :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
summary(lm(data=data, FMax ~ .))
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = FMax ~ ., data = data)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.963e-13 -7.930e-15  0.000e+00  5.570e-15  1.260e-12 

Coefficients: (57 not defined because of singularities)
                                               Estimate Std. Error    t value
(Intercept)                                   1.581e+00  2.729e-12  5.793e+11
X                                            -9.689e-16  3.156e-16 -3.070e+00
set_operation_latency.altfp_divide_16        -3.087e-01  7.230e-15 -4.269e+13
set_resource_constraint.signed_divide_16     -1.202e+00  1.366e-13 -8.801e+12
set_operation_latency.mem_dual_port           1.964e+00  3.386e-13  5.800e+12
set_operation_latency.altfp_truncate_16      -3.941e+00  4.183e-13 -9.422e+12
set_resource_constraint.altfp_multiply_64    -4.192e+00  1.871e-13 -2.241e+13
set_parameter.NO_ROMS                         3.347e+00  3.166e-13  1.057e+13
set_resource_constraint.signed_multiply_8    -3.607e+00  1.911e-13 -1.887e+13
set_operation_latency.altfp_fptosi            1.555e+00  1.446e-13  1.075e+13
set_resource_constraint.unsigned_modulus_16  -3.621e+00  2.579e-13 -1.404e+13
set_resource_constraint.unsigned_multiply_32  2.731e+00  1.126e-13  2.426e+13
set_resource_constraint.altfp_add_8           1.139e+00  1.447e-13  7.868e+12
set_operation_latency.unsigned_multiply_32    1.589e+00  1.124e-13  1.414e+13
set_resource_constraint.unsigned_add_32       5.163e+00  2.250e-13  2.294e+13
set_operation_latency.unsigned_divide_16      3.895e-01  6.612e-14  5.890e+12
set_resource_constraint.signed_multiply_16   -9.574e-01  1.920e-13 -4.987e+12
set_operation_latency.signed_modulus_32      -1.024e+00  1.608e-13 -6.365e+12
set_operation_latency.signed_multiply_32      4.624e+00  2.302e-13  2.009e+13
set_operation_latency.altfp_add_64           -2.901e-01  1.859e-14 -1.560e+13
set_operation_latency.altfp_subtract_32       7.665e-01  2.858e-14  2.682e+13
set_parameter.PS_MIN_SIZE                    -8.925e-01  3.009e-14 -2.966e+13
set_resource_constraint.altfp_add_64          1.079e+00  6.164e-14  1.750e+13
set_operation_latency.altfp_multiply_64       9.609e-01  7.588e-14  1.266e+13
set_operation_latency.unsigned_multiply_8     1.576e+00  5.901e-14  2.671e+13
set_operation_latency.unsigned_add_32         6.328e-01  8.368e-14  7.562e+12
set_operation_latency.altfp_truncate_8       -5.091e-01  8.641e-14 -5.892e+12
set_resource_constraint.signed_multiply_64    2.921e+00  1.041e-13  2.805e+13
set_operation_latency.signed_divide_64        1.680e+00  1.898e-13  8.852e+12
set_resource_constraint.altfp_subtract_16     1.062e+00  1.029e-13  1.032e+13
set_parameter.MB_MINIMIZE_HW                 -8.907e+00  2.462e-13 -3.617e+13
set_parameter.PATTERN_SHARE_ADD               1.436e-14  1.734e-14  8.280e-01
set_resource_constraint.signed_add_16         3.049e+00  3.845e-13  7.932e+12
set_parameter.MULTIPLIER_NO_CHAIN            -1.438e+00  3.435e-13 -4.185e+12
set_resource_constraint.unsigned_multiply_8  -4.986e-01  3.056e-14 -1.632e+13
set_operation_latency.reg                    -2.187e+00  1.998e-13 -1.095e+13
set_operation_latency.unsigned_modulus_64     3.020e+00  1.467e-13  2.059e+13
set_resource_constraint.unsigned_divide_16   -1.317e-01  1.146e-13 -1.149e+12
set_resource_constraint.unsigned_divide_64    1.421e+00  9.922e-14  1.432e+13
set_resource_constraint.signed_divide_8       4.760e+00  3.682e-13  1.293e+13
set_operation_latency.altfp_extend_32         1.896e-01  9.549e-14  1.986e+12
set_resource_constraint.altfp_add_16          3.600e+00  2.127e-13  1.693e+13
set_resource_constraint.signed_modulus_32     4.788e-02  1.395e-13  3.432e+11
set_parameter.DONT_CHAIN_GET_ELEM_PTR         4.045e-01  1.077e-13  3.756e+12
set_resource_constraint.unsigned_modulus_64  -3.451e+00  1.106e-13 -3.119e+13
set_operation_latency.unsigned_modulus_8      5.268e+00  2.087e-13  2.525e+13
set_resource_constraint.mem_dual_port        -7.728e+00  4.528e-13 -1.707e+13
set_parameter.SDC_MULTIPUMP                   9.133e+00  5.994e-13  1.524e+13
set_operation_latency.signed_multiply_16     -4.332e+00  1.514e-13 -2.861e+13
set_operation_latency.altfp_multiply_16       6.019e-01  4.157e-14  1.448e+13
set_operation_latency.unsigned_modulus_16     2.620e-01  9.755e-14  2.686e+12
set_resource_constraint.altfp_subtract_64    -1.872e-01  1.431e-13 -1.308e+12
set_operation_latency.signed_add_8           -1.996e+00  7.013e-14 -2.846e+13
set_operation_latency.unsigned_add_16         1.579e+00  2.192e-13  7.206e+12
set_parameter.PATTERN_SHARE_SUB              -6.206e-15  1.613e-14 -3.850e-01
set_parameter.CLOCK_PERIOD                    8.830e-02  1.979e-14  4.461e+12
set_resource_constraint.altfp_subtract_8      4.483e+00  1.675e-13  2.676e+13
set_parameter.NO_LOOP_PIPELINING              3.606e+00  2.862e-13  1.260e+13
set_operation_latency.altfp_divide_64        -5.857e-02  4.056e-15 -1.444e+13
set_parameter.INCREMENTAL_SDC                -1.171e+01  7.271e-13 -1.611e+13
set_operation_latency.signed_divide_8        -8.171e+00  2.727e-13 -2.996e+13
set_resource_constraint.altfp_multiply_8      2.154e+00  2.474e-13  8.706e+12
set_resource_constraint.unsigned_multiply_16  1.640e+00  1.904e-13  8.614e+12
set_operation_latency.signed_modulus_64      -1.904e+00  1.261e-13 -1.509e+13
set_operation_latency.unsigned_multiply_64    1.710e+00  1.295e-13  1.320e+13
set_resource_constraint.unsigned_multiply_64 -2.886e+00  1.000e-13 -2.886e+13
set_operation_latency.signed_add_32          -7.264e-01  8.704e-14 -8.346e+12
set_parameter.DISABLE_REG_SHARING             2.740e+00  1.436e-13  1.908e+13
set_operation_latency.unsigned_divide_64      5.914e+00  2.269e-13  2.607e+13
set_resource_constraint.unsigned_modulus_8   -2.024e+00  2.198e-13 -9.208e+12
set_combine_basicblock                        2.966e+00  3.145e-13  9.430e+12
set_parameter.ENABLE_PATTERN_SHARING         -1.907e+00  3.565e-13 -5.348e+12
set_parameter.PIPELINE_RESOURCE_SHARING      -4.787e-14  1.559e-14 -3.071e+00
set_parameter.MULTIPUMPING                    1.365e+00  6.111e-13  2.234e+12
set_resource_constraint.signed_add_32        -2.808e+00  1.308e-13 -2.148e+13
set_operation_latency.altfp_add_32           -2.171e-01  6.039e-14 -3.595e+12
set_resource_constraint.altfp_divide_64       2.453e+00  3.338e-13  7.350e+12
set_operation_latency.signed_modulus_8       -9.201e-01  1.639e-13 -5.612e+12
set_parameter.PIPELINE_ALL                    7.456e+00  3.900e-13  1.912e+13
set_resource_constraint.altfp_add_32         -1.890e+00  2.377e-13 -7.952e+12
set_parameter.PS_MIN_WIDTH                   -4.041e-01  3.927e-14 -1.029e+13
set_operation_latency.altfp_subtract_8               NA         NA         NA
set_operation_latency.signed_multiply_8              NA         NA         NA
set_operation_latency.altfp_extend_64                NA         NA         NA
set_operation_latency.local_mem_dual_port            NA         NA         NA
set_operation_latency.altfp_subtract_64              NA         NA         NA
set_resource_constraint.signed_divide_32             NA         NA         NA
set_resource_constraint.signed_multiply_32           NA         NA         NA
set_operation_latency.signed_divide_16               NA         NA         NA
set_operation_latency.signed_multiply_64             NA         NA         NA
set_parameter.PATTERN_SHARE_BITOPS            6.478e-14  2.484e-14  2.608e+00
set_resource_constraint.signed_add_8                 NA         NA         NA
set_parameter.SDC_PRIORITY                   -7.256e-14  2.391e-14 -3.034e+00
set_resource_constraint.altfp_multiply_32            NA         NA         NA
set_resource_constraint.altfp_divide_16              NA         NA         NA
set_resource_constraint.signed_modulus_16            NA         NA         NA
set_operation_latency.signed_add_64                  NA         NA         NA
set_resource_constraint.unsigned_modulus_32          NA         NA         NA
set_operation_latency.altfp_multiply_8               NA         NA         NA
set_resource_constraint.signed_modulus_64            NA         NA         NA
set_operation_latency.signed_comp_o                  NA         NA         NA
set_parameter.PS_MAX_SIZE                            NA         NA         NA
set_operation_latency.signed_comp_u                  NA         NA         NA
set_parameter.DUAL_PORT_BINDING               1.558e-14  2.269e-14  6.870e-01
set_resource_constraint.unsigned_divide_32           NA         NA         NA
set_operation_latency.altfp_multiply_32              NA         NA         NA
set_operation_latency.altfp_add_16                   NA         NA         NA
set_operation_latency.altfp_truncate_32              NA         NA         NA
set_operation_latency.unsigned_add_64                NA         NA         NA
set_operation_latency.signed_add_16                  NA         NA         NA
set_parameter.PS_BIT_DIFF_THRESHOLD                  NA         NA         NA
set_operation_latency.altfp_add_8                    NA         NA         NA
set_operation_latency.altfp_divide_32                NA         NA         NA
set_operation_latency.altfp_sitofp                   NA         NA         NA
set_resource_constraint.unsigned_add_64              NA         NA         NA
set_resource_constraint.signed_add_64                NA         NA         NA
set_operation_latency.signed_divide_32               NA         NA         NA
set_parameter.MODULO_SCHEDULER                       NA         NA         NA
set_resource_constraint.unsigned_add_16              NA         NA         NA
set_operation_latency.altfp_divide_8                 NA         NA         NA
set_parameter.EXPLICIT_LPM_MULTS                     NA         NA         NA
set_parameter.MB_MAX_BACK_PASSES                     NA         NA         NA
set_operation_latency.signed_modulus_16              NA         NA         NA
set_operation_latency.unsigned_multiply_16           NA         NA         NA
set_operation_latency.altfp_extend_8                 NA         NA         NA
set_operation_latency.unsigned_divide_32             NA         NA         NA
set_operation_latency.altfp_subtract_16              NA         NA         NA
set_resource_constraint.unsigned_add_8               NA         NA         NA
set_parameter.PATTERN_SHARE_SHIFT             2.626e-14  1.810e-14  1.450e+00
set_operation_latency.unsigned_divide_8              NA         NA         NA
set_resource_constraint.altfp_multiply_16            NA         NA         NA
set_resource_constraint.altfp_divide_32              NA         NA         NA
set_resource_constraint.unsigned_divide_8            NA         NA         NA
set_operation_latency.altfp_truncate_64              NA         NA         NA
set_operation_latency.unsigned_modulus_32            NA         NA         NA
set_operation_latency.unsigned_add_8                 NA         NA         NA
set_operation_latency.altfp_extend_16                NA         NA         NA
set_resource_constraint.altfp_divide_8               NA         NA         NA
set_resource_constraint.altfp_subtract_32            NA         NA         NA
set_resource_constraint.signed_modulus_8             NA         NA         NA
set_resource_constraint.signed_divide_64             NA         NA         NA
set_resource_constraint.shared_mem_dual_port         NA         NA         NA
                                             Pr(>|t|)    
(Intercept)                                   < 2e-16 ***
X                                             0.00240 ** 
set_operation_latency.altfp_divide_16         < 2e-16 ***
set_resource_constraint.signed_divide_16      < 2e-16 ***
set_operation_latency.mem_dual_port           < 2e-16 ***
set_operation_latency.altfp_truncate_16       < 2e-16 ***
set_resource_constraint.altfp_multiply_64     < 2e-16 ***
set_parameter.NO_ROMS                         < 2e-16 ***
set_resource_constraint.signed_multiply_8     < 2e-16 ***
set_operation_latency.altfp_fptosi            < 2e-16 ***
set_resource_constraint.unsigned_modulus_16   < 2e-16 ***
set_resource_constraint.unsigned_multiply_32  < 2e-16 ***
set_resource_constraint.altfp_add_8           < 2e-16 ***
set_operation_latency.unsigned_multiply_32    < 2e-16 ***
set_resource_constraint.unsigned_add_32       < 2e-16 ***
set_operation_latency.unsigned_divide_16      < 2e-16 ***
set_resource_constraint.signed_multiply_16    < 2e-16 ***
set_operation_latency.signed_modulus_32       < 2e-16 ***
set_operation_latency.signed_multiply_32      < 2e-16 ***
set_operation_latency.altfp_add_64            < 2e-16 ***
set_operation_latency.altfp_subtract_32       < 2e-16 ***
set_parameter.PS_MIN_SIZE                     < 2e-16 ***
set_resource_constraint.altfp_add_64          < 2e-16 ***
set_operation_latency.altfp_multiply_64       < 2e-16 ***
set_operation_latency.unsigned_multiply_8     < 2e-16 ***
set_operation_latency.unsigned_add_32         < 2e-16 ***
set_operation_latency.altfp_truncate_8        < 2e-16 ***
set_resource_constraint.signed_multiply_64    < 2e-16 ***
set_operation_latency.signed_divide_64        < 2e-16 ***
set_resource_constraint.altfp_subtract_16     < 2e-16 ***
set_parameter.MB_MINIMIZE_HW                  < 2e-16 ***
set_parameter.PATTERN_SHARE_ADD               0.40852    
set_resource_constraint.signed_add_16         < 2e-16 ***
set_parameter.MULTIPLIER_NO_CHAIN             < 2e-16 ***
set_resource_constraint.unsigned_multiply_8   < 2e-16 ***
set_operation_latency.reg                     < 2e-16 ***
set_operation_latency.unsigned_modulus_64     < 2e-16 ***
set_resource_constraint.unsigned_divide_16    < 2e-16 ***
set_resource_constraint.unsigned_divide_64    < 2e-16 ***
set_resource_constraint.signed_divide_8       < 2e-16 ***
set_operation_latency.altfp_extend_32         < 2e-16 ***
set_resource_constraint.altfp_add_16          < 2e-16 ***
set_resource_constraint.signed_modulus_32     < 2e-16 ***
set_parameter.DONT_CHAIN_GET_ELEM_PTR         < 2e-16 ***
set_resource_constraint.unsigned_modulus_64   < 2e-16 ***
set_operation_latency.unsigned_modulus_8      < 2e-16 ***
set_resource_constraint.mem_dual_port         < 2e-16 ***
set_parameter.SDC_MULTIPUMP                   < 2e-16 ***
set_operation_latency.signed_multiply_16      < 2e-16 ***
set_operation_latency.altfp_multiply_16       < 2e-16 ***
set_operation_latency.unsigned_modulus_16     < 2e-16 ***
set_resource_constraint.altfp_subtract_64     < 2e-16 ***
set_operation_latency.signed_add_8            < 2e-16 ***
set_operation_latency.unsigned_add_16         < 2e-16 ***
set_parameter.PATTERN_SHARE_SUB               0.70076    
set_parameter.CLOCK_PERIOD                    < 2e-16 ***
set_resource_constraint.altfp_subtract_8      < 2e-16 ***
set_parameter.NO_LOOP_PIPELINING              < 2e-16 ***
set_operation_latency.altfp_divide_64         < 2e-16 ***
set_parameter.INCREMENTAL_SDC                 < 2e-16 ***
set_operation_latency.signed_divide_8         < 2e-16 ***
set_resource_constraint.altfp_multiply_8      < 2e-16 ***
set_resource_constraint.unsigned_multiply_16  < 2e-16 ***
set_operation_latency.signed_modulus_64       < 2e-16 ***
set_operation_latency.unsigned_multiply_64    < 2e-16 ***
set_resource_constraint.unsigned_multiply_64  < 2e-16 ***
set_operation_latency.signed_add_32           < 2e-16 ***
set_parameter.DISABLE_REG_SHARING             < 2e-16 ***
set_operation_latency.unsigned_divide_64      < 2e-16 ***
set_resource_constraint.unsigned_modulus_8    < 2e-16 ***
set_combine_basicblock                        < 2e-16 ***
set_parameter.ENABLE_PATTERN_SHARING          < 2e-16 ***
set_parameter.PIPELINE_RESOURCE_SHARING       0.00239 ** 
set_parameter.MULTIPUMPING                    < 2e-16 ***
set_resource_constraint.signed_add_32         < 2e-16 ***
set_operation_latency.altfp_add_32            < 2e-16 ***
set_resource_constraint.altfp_divide_64       < 2e-16 ***
set_operation_latency.signed_modulus_8        < 2e-16 ***
set_parameter.PIPELINE_ALL                    < 2e-16 ***
set_resource_constraint.altfp_add_32          < 2e-16 ***
set_parameter.PS_MIN_WIDTH                    < 2e-16 ***
set_operation_latency.altfp_subtract_8             NA    
set_operation_latency.signed_multiply_8            NA    
set_operation_latency.altfp_extend_64              NA    
set_operation_latency.local_mem_dual_port          NA    
set_operation_latency.altfp_subtract_64            NA    
set_resource_constraint.signed_divide_32           NA    
set_resource_constraint.signed_multiply_32         NA    
set_operation_latency.signed_divide_16             NA    
set_operation_latency.signed_multiply_64           NA    
set_parameter.PATTERN_SHARE_BITOPS            0.00969 ** 
set_resource_constraint.signed_add_8               NA    
set_parameter.SDC_PRIORITY                    0.00269 ** 
set_resource_constraint.altfp_multiply_32          NA    
set_resource_constraint.altfp_divide_16            NA    
set_resource_constraint.signed_modulus_16          NA    
set_operation_latency.signed_add_64                NA    
set_resource_constraint.unsigned_modulus_32        NA    
set_operation_latency.altfp_multiply_8             NA    
set_resource_constraint.signed_modulus_64          NA    
set_operation_latency.signed_comp_o                NA    
set_parameter.PS_MAX_SIZE                          NA    
set_operation_latency.signed_comp_u                NA    
set_parameter.DUAL_PORT_BINDING               0.49292    
set_resource_constraint.unsigned_divide_32         NA    
set_operation_latency.altfp_multiply_32            NA    
set_operation_latency.altfp_add_16                 NA    
set_operation_latency.altfp_truncate_32            NA    
set_operation_latency.unsigned_add_64              NA    
set_operation_latency.signed_add_16                NA    
set_parameter.PS_BIT_DIFF_THRESHOLD                NA    
set_operation_latency.altfp_add_8                  NA    
set_operation_latency.altfp_divide_32              NA    
set_operation_latency.altfp_sitofp                 NA    
set_resource_constraint.unsigned_add_64            NA    
set_resource_constraint.signed_add_64              NA    
set_operation_latency.signed_divide_32             NA    
set_parameter.MODULO_SCHEDULER                     NA    
set_resource_constraint.unsigned_add_16            NA    
set_operation_latency.altfp_divide_8               NA    
set_parameter.EXPLICIT_LPM_MULTS                   NA    
set_parameter.MB_MAX_BACK_PASSES                   NA    
set_operation_latency.signed_modulus_16            NA    
set_operation_latency.unsigned_multiply_16         NA    
set_operation_latency.altfp_extend_8               NA    
set_operation_latency.unsigned_divide_32           NA    
set_operation_latency.altfp_subtract_16            NA    
set_resource_constraint.unsigned_add_8             NA    
set_parameter.PATTERN_SHARE_SHIFT             0.14832    
set_operation_latency.unsigned_divide_8            NA    
set_resource_constraint.altfp_multiply_16          NA    
set_resource_constraint.altfp_divide_32            NA    
set_resource_constraint.unsigned_divide_8          NA    
set_operation_latency.altfp_truncate_64            NA    
set_operation_latency.unsigned_modulus_32          NA    
set_operation_latency.unsigned_add_8               NA    
set_operation_latency.altfp_extend_16              NA    
set_resource_constraint.altfp_divide_8             NA    
set_resource_constraint.altfp_subtract_32          NA    
set_resource_constraint.signed_modulus_8           NA    
set_resource_constraint.signed_divide_64           NA    
set_resource_constraint.shared_mem_dual_port       NA    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 9.384e-14 on 232 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1 
F-statistic: 7.084e+28 on 84 and 232 DF,  p-value: < 2.2e-16
#+end_example

Hmmm, pretty hard to interpret.

Let's look at something more specific for a change!

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output :session *R* :exports both
data=data_bak
summary(lm(data=data,Regs~ set_operation_latency.signed_multiply_64))
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = Regs ~ set_operation_latency.signed_multiply_64, 
    data = data)

Residuals:
     Min       1Q   Median       3Q      Max 
-1381.48  -411.48    61.52   135.52  2730.82 

Coefficients:
                                         Estimate Std. Error t value Pr(>|t|)
(Intercept)                               3382.18      50.62   66.82   <2e-16
set_operation_latency.signed_multiply_64   431.30      21.40   20.16   <2e-16
                                            
(Intercept)                              ***
set_operation_latency.signed_multiply_64 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 694.4 on 315 degrees of freedom
Multiple R-squared:  0.5633,	Adjusted R-squared:  0.5619 
F-statistic: 406.3 on 1 and 315 DF,  p-value: < 2.2e-16
#+end_example

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R* 
library(ggplot2)
ggplot(data=data, aes(y=Regs, x=set_operation_latency.signed_multiply_64, color=set_operation_latency.signed_add_64)) +
    geom_jitter(aes(x=as.factor(set_operation_latency.signed_multiply_64))) +
    geom_smooth(aes(x=as.numeric(set_operation_latency.signed_multiply_64)), method="lm", formula=y~x+I(1/(x+1))) +
    theme_bw()

#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure4788e2U.png]]

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R* 
ggplot(data=data, aes(y=Regs, x=set_operation_latency.signed_add_64, color=set_operation_latency.signed_multiply_64)) +
    geom_jitter(aes(x=as.factor(set_operation_latency.signed_add_64))) +
    geom_smooth(aes(x=as.numeric(set_operation_latency.signed_add_64)), method="lm", formula=y~x) +
    theme_bw()
#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure4788rAb.png]]

#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/generate_plots.r
#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R* 
ggplot(data=data[data$set_operation_latency.signed_multiply_64 ==1,], aes(y=Regs, x=set_operation_latency.signed_add_64)) +
    geom_jitter(aes(x=as.factor(set_operation_latency.signed_add_64))) +
    geom_smooth(aes(x=as.numeric(set_operation_latency.signed_add_64)), method="lm", formula=y~x) +
    theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-4788SYS/figure47884Kh.png]]

In the end, it's very hard to know what's good, why such or such
parameter was used, etc.

- We discussed about the difficulties in multi-dimension setups:
  https://blog.acolyer.org/2017/10/31/same-stats-different-graphs-generating-datasets-with-varied-appearance-and-identical-statistics-through-simulated-annealing/
- The analysis (lm or aov) is really hard when mixing factors and
  continuous variables.
- It's possible to sort parameters by importance (for aov) but I'm not
  sure how to do this in a systematic way in such a high dimension.
*** [2017-12-12 Tue]
- Cleaning up older entries
- Now using git submodules for code
- Now tangling code blocks into scripts
**** More Attempts at Correlations        :R:Code:FPGA:Autotuning:DataVis:
***** Setup
Make sure you have the data:

#+CALL: update_legup_tuner()

Import dependencies, set the graphics output, and define paths:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :var repository_dir=repository_dir
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R

library(dplyr)
library(GGally)

setEPS()

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

plot_dir <- c(repository_dir,
              "/legup-tuner/",
              "post_place_and_route/py/results/r_scripts/",
              "correlations")

experiments <- c("balanced", "area", "perf", "perflat")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

hardware_metrics <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs",
                      "Blocks", "RAM", "DPS")

dir.create(paste(plot_dir, collapse = ""), showWarnings = FALSE)

#+end_src

#+RESULTS:


***** Pearson, Spearman and Kendall Correlations
The =sorted_correlations= function filters correlation matrices, getting
only rows with one of the hardware metrics. Then, it sorts rows by
correlation.

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R
#
# Function adapted from:
#
#   https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html#calculating-correlations-for-multivariate-data
#
sorted_correlations <- function(data, datapoints) {
    names(data) <- c("First.Variable", "Second.Variable","Correlation")

    #
    # Restricting comparisons to correlations that contain a hardware metric
    #
    data <- dplyr::filter(data, grepl(paste(hardware_metrics,
                                            collapse = "|"),
                                      data$Second.Variable))

    head(data[order(abs(data$Correlation), decreasing = T), ],
         n = datapoints)
}

#+end_src

#+RESULTS:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R
load_data <- function(application, experiments) {
    data       <- data.frame()

    for (experiment in experiments) {
        new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                                   experiment, paste(application,
                                                     ".csv",
                                                     sep = ""),
                                   sep = "/"),
                             header = TRUE, sep = ",")

        new_data <- as.data.frame(new_data)
        new_data <- new_data[is.finite(new_data$WNS),]

        if (ncol(data) == 0) {
            data <- new_data
        } else {
            data <- rbind(data, new_data)
        }
    }

    data  <- as.data.frame(sapply(data, as.numeric))
    return(data)
}

plot_correlations <- function(application, experiments, cor_method,
                              plot_columns) {
    data <- load_data(application, experiments)

    cormatrix <- cor(data, method = cor_method)
    diag(cormatrix) <- 0
    cormatrix[lower.tri(cormatrix)] <- 0
    cormatrix <- as.data.frame(as.table(cormatrix))

    correlation <- sorted_correlations(cormatrix, 120)

    print(paste("Generating 120 strongest correlations for '", application,
                "'...", sep = ""))

    write.csv(correlation, file = paste(paste(plot_dir, collapse = ""),
                                        paste(cor_method, "_", application,
                                              ".csv", sep = ""), sep = "/"))

    print(paste(paste("CSV generated at ", 
                      paste(plot_dir, collapse = ""),
                      sep = ""), paste(cor_method, "_", application,
                                       ".csv", sep = ""),
                sep = "/"))

    short_correlation <- correlation[1:plot_columns, ]

    print(paste("Generating scatter plots of the ",
                plot_columns, " strongest correlations for '",
                application, "'...", sep = ""))

    postscript(paste(paste(plot_dir, collapse = ""), paste(cor_method,
                                                           "_",
                                                           application,
                                                           ".eps",
                                                           sep = ""),
                     sep = "/"),
               width = 20, height = 20)
    
    columns <- unique(c(as.vector(short_correlation$First.Variable),
                        as.vector(short_correlation$Second.Variable)))

    ggpairs_plot <- ggpairs(data, columns = columns)
    
    print(ggpairs_plot)

    print(paste(paste("Plot generated at ",
                      paste(plot_dir, collapse = ""),
                      sep = ""), paste(cor_method, "_", application,
                                       ".eps", sep = ""),
                sep = "/"))

    dev.off()
    
    return(short_correlation)
}

#+end_src

#+RESULTS:

Now we can run =plot_correlations= and generate the files.  We will
order the correlation matrices using 3 correlation coefficients:

1. [[https://en.wikipedia.org/wiki/Pearson_correlation_coefficient][Pearson's]]
   
   Default =R= method. Checks for linear relationships.

2. [[https://en.wikipedia.org/wiki/Spearman%2527s_rank_correlation_coefficient][Spearman's]]

   Check for monotonic relationships.

3. [[https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient][Kendall's]]

   Works for factors? Need to understand better.

To plot the 10 largest correlations, run:

#+HEADER: :results output :session *R* :exports both
#+begin_src R
cor_pearson <- plot_correlations("dfdiv", experiments, "pearson", 10)
cor_spearman <- plot_correlations("dfdiv", experiments, "spearman", 10)
cor_kendall <- plot_correlations("dfdiv", experiments, "kendall", 10)

#+end_src

#+RESULTS:
#+begin_example
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 6s  plot: [1,3] [=-------------------------------------------------]  2% est: 8s  plot: [1,4] [=-------------------------------------------------]  2% est: 9s  plot: [1,5] [=-------------------------------------------------]  3% est:10s  plot: [1,6] [==------------------------------------------------]  3% est:10s  plot: [1,7] [==------------------------------------------------]  4% est:10s  plot: [1,8] [==------------------------------------------------]  4% est:10s  plot: [1,9] [==------------------------------------------------]  5% est:10s  plot: [1,10] [==-----------------------------------------------]  5% est:10s  plot: [1,11] [===----------------------------------------------]  6% est:11s  plot: [1,12] [===----------------------------------------------]  6% est:11s  plot: [1,13] [===----------------------------------------------]  7% est:11s  plot: [1,14] [====---------------------------------------------]  7% est:11s  plot: [2,1] [====----------------------------------------------]  8% est:12s  plot: [2,2] [====----------------------------------------------]  8% est:11s  plot: [2,3] [====----------------------------------------------]  9% est:11s  plot: [2,4] [=====---------------------------------------------]  9% est:11s  plot: [2,5] [=====---------------------------------------------] 10% est:11s  plot: [2,6] [=====---------------------------------------------] 10% est:11s  plot: [2,7] [=====---------------------------------------------] 11% est:11s  plot: [2,8] [======--------------------------------------------] 11% est:11s  plot: [2,9] [======--------------------------------------------] 12% est:10s  plot: [2,10] [======-------------------------------------------] 12% est:10s  plot: [2,11] [======-------------------------------------------] 13% est:10s  plot: [2,12] [======-------------------------------------------] 13% est:10s  plot: [2,13] [=======------------------------------------------] 14% est:10s  plot: [2,14] [=======------------------------------------------] 14% est:10s  plot: [3,1] [=======-------------------------------------------] 15% est:10s  plot: [3,2] [========------------------------------------------] 15% est:10s  plot: [3,3] [========------------------------------------------] 16% est:10s  plot: [3,4] [========------------------------------------------] 16% est:10s  plot: [3,5] [========------------------------------------------] 17% est:10s  plot: [3,6] [=========-----------------------------------------] 17% est: 9s  plot: [3,7] [=========-----------------------------------------] 18% est: 9s  plot: [3,8] [=========-----------------------------------------] 18% est: 9s  plot: [3,9] [=========-----------------------------------------] 19% est: 9s  plot: [3,10] [==========---------------------------------------] 19% est: 9s  plot: [3,11] [==========---------------------------------------] 20% est: 9s  plot: [3,12] [==========---------------------------------------] 20% est: 9s  plot: [3,13] [==========---------------------------------------] 21% est: 9s  plot: [3,14] [==========---------------------------------------] 21% est: 9s  plot: [4,1] [===========---------------------------------------] 22% est: 9s  plot: [4,2] [===========---------------------------------------] 22% est: 9s  plot: [4,3] [===========---------------------------------------] 23% est: 9s  plot: [4,4] [============--------------------------------------] 23% est: 9s  plot: [4,5] [============--------------------------------------] 24% est: 9s  plot: [4,6] [============--------------------------------------] 24% est: 9s  plot: [4,7] [============--------------------------------------] 25% est: 8s  plot: [4,8] [=============-------------------------------------] 26% est: 8s  plot: [4,9] [=============-------------------------------------] 26% est: 8s  plot: [4,10] [=============------------------------------------] 27% est: 8s  plot: [4,11] [=============------------------------------------] 27% est: 8s  plot: [4,12] [=============------------------------------------] 28% est: 8s  plot: [4,13] [==============-----------------------------------] 28% est: 8s  plot: [4,14] [==============-----------------------------------] 29% est: 8s  plot: [5,1] [===============-----------------------------------] 29% est: 8s  plot: [5,2] [===============-----------------------------------] 30% est: 8s  plot: [5,3] [===============-----------------------------------] 30% est: 8s  plot: [5,4] [===============-----------------------------------] 31% est: 8s  plot: [5,5] [================----------------------------------] 31% est: 8s  plot: [5,6] [================----------------------------------] 32% est: 8s  plot: [5,7] [================----------------------------------] 32% est: 8s  plot: [5,8] [================----------------------------------] 33% est: 8s  plot: [5,9] [=================---------------------------------] 33% est: 8s  plot: [5,10] [================---------------------------------] 34% est: 7s  plot: [5,11] [=================--------------------------------] 34% est: 7s  plot: [5,12] [=================--------------------------------] 35% est: 7s  plot: [5,13] [=================--------------------------------] 35% est: 7s  plot: [5,14] [==================-------------------------------] 36% est: 7s  plot: [6,1] [==================--------------------------------] 36% est: 7s  plot: [6,2] [==================--------------------------------] 37% est: 7s  plot: [6,3] [===================-------------------------------] 37% est: 7s  plot: [6,4] [===================-------------------------------] 38% est: 7s  plot: [6,5] [===================-------------------------------] 38% est: 7s  plot: [6,6] [===================-------------------------------] 39% est: 7s  plot: [6,7] [====================------------------------------] 39% est: 7s  plot: [6,8] [====================------------------------------] 40% est: 7s  plot: [6,9] [====================------------------------------] 40% est: 7s  plot: [6,10] [====================-----------------------------] 41% est: 7s  plot: [6,11] [====================-----------------------------] 41% est: 7s  plot: [6,12] [====================-----------------------------] 42% est: 7s  plot: [6,13] [=====================----------------------------] 42% est: 6s  plot: [6,14] [=====================----------------------------] 43% est: 6s  plot: [7,1] [======================----------------------------] 43% est: 6s  plot: [7,2] [======================----------------------------] 44% est: 6s  plot: [7,3] [======================----------------------------] 44% est: 6s  plot: [7,4] [======================----------------------------] 45% est: 6s  plot: [7,5] [=======================---------------------------] 45% est: 6s  plot: [7,6] [=======================---------------------------] 46% est: 6s  plot: [7,7] [=======================---------------------------] 46% est: 6s  plot: [7,8] [=======================---------------------------] 47% est: 6s  plot: [7,9] [========================--------------------------] 47% est: 6s  plot: [7,10] [========================-------------------------] 48% est: 6s  plot: [7,11] [========================-------------------------] 48% est: 6s  plot: [7,12] [========================-------------------------] 49% est: 6s  plot: [7,13] [========================-------------------------] 49% est: 6s  plot: [7,14] [========================-------------------------] 50% est: 6s  plot: [8,1] [=========================-------------------------] 51% est: 6s  plot: [8,2] [==========================------------------------] 51% est: 5s  plot: [8,3] [==========================------------------------] 52% est: 5s  plot: [8,4] [==========================------------------------] 52% est: 5s  plot: [8,5] [==========================------------------------] 53% est: 5s  plot: [8,6] [===========================-----------------------] 53% est: 5s  plot: [8,7] [===========================-----------------------] 54% est: 5s  plot: [8,8] [===========================-----------------------] 54% est: 5s  plot: [8,9] [===========================-----------------------] 55% est: 5s  plot: [8,10] [===========================----------------------] 55% est: 5s  plot: [8,11] [===========================----------------------] 56% est: 5s  plot: [8,12] [===========================----------------------] 56% est: 5s  plot: [8,13] [============================---------------------] 57% est: 5s  plot: [8,14] [============================---------------------] 57% est: 5s  plot: [9,1] [=============================---------------------] 58% est: 5s  plot: [9,2] [=============================---------------------] 58% est: 5s  plot: [9,3] [=============================---------------------] 59% est: 5s  plot: [9,4] [==============================--------------------] 59% est: 5s  plot: [9,5] [==============================--------------------] 60% est: 4s  plot: [9,6] [==============================--------------------] 60% est: 4s  plot: [9,7] [==============================--------------------] 61% est: 4s  plot: [9,8] [===============================-------------------] 61% est: 4s  plot: [9,9] [===============================-------------------] 62% est: 4s  plot: [9,10] [==============================-------------------] 62% est: 4s  plot: [9,11] [===============================------------------] 63% est: 4s  plot: [9,12] [===============================------------------] 63% est: 4s  plot: [9,13] [===============================------------------] 64% est: 4s  plot: [9,14] [================================-----------------] 64% est: 4s  plot: [10,1] [================================-----------------] 65% est: 4s  plot: [10,2] [================================-----------------] 65% est: 4s  plot: [10,3] [================================-----------------] 66% est: 4s  plot: [10,4] [================================-----------------] 66% est: 4s  plot: [10,5] [=================================----------------] 67% est: 4s  plot: [10,6] [=================================----------------] 67% est: 4s  plot: [10,7] [=================================----------------] 68% est: 4s  plot: [10,8] [==================================---------------] 68% est: 3s  plot: [10,9] [==================================---------------] 69% est: 3s  plot: [10,10] [=================================---------------] 69% est: 3s  plot: [10,11] [==================================--------------] 70% est: 3s  plot: [10,12] [==================================--------------] 70% est: 3s  plot: [10,13] [==================================--------------] 71% est: 3s  plot: [10,14] [==================================--------------] 71% est: 3s  plot: [11,1] [===================================--------------] 72% est: 3s  plot: [11,2] [====================================-------------] 72% est: 3s  plot: [11,3] [====================================-------------] 73% est: 3s  plot: [11,4] [====================================-------------] 73% est: 3s  plot: [11,5] [====================================-------------] 74% est: 3s  plot: [11,6] [====================================-------------] 74% est: 3s  plot: [11,7] [=====================================------------] 75% est: 3s  plot: [11,8] [=====================================------------] 76% est: 3s  plot: [11,9] [=====================================------------] 76% est: 3s  plot: [11,10] [=====================================-----------] 77% est: 3s  plot: [11,11] [=====================================-----------] 77% est: 3s  plot: [11,12] [=====================================-----------] 78% est: 3s  plot: [11,13] [=====================================-----------] 78% est: 2s  plot: [11,14] [======================================----------] 79% est: 2s  plot: [12,1] [=======================================----------] 79% est: 2s  plot: [12,2] [=======================================----------] 80% est: 2s  plot: [12,3] [=======================================----------] 80% est: 2s  plot: [12,4] [========================================---------] 81% est: 2s  plot: [12,5] [========================================---------] 81% est: 2s  plot: [12,6] [========================================---------] 82% est: 2s  plot: [12,7] [========================================---------] 82% est: 2s  plot: [12,8] [========================================---------] 83% est: 2s  plot: [12,9] [=========================================--------] 83% est: 2s  plot: [12,10] [========================================--------] 84% est: 2s  plot: [12,11] [========================================--------] 84% est: 2s  plot: [12,12] [=========================================-------] 85% est: 2s  plot: [12,13] [=========================================-------] 85% est: 2s  plot: [12,14] [=========================================-------] 86% est: 2s  plot: [13,1] [==========================================-------] 86% est: 2s  plot: [13,2] [==========================================-------] 87% est: 2s  plot: [13,3] [===========================================------] 87% est: 1s  plot: [13,4] [===========================================------] 88% est: 1s  plot: [13,5] [===========================================------] 88% est: 1s  plot: [13,6] [============================================-----] 89% est: 1s  plot: [13,7] [============================================-----] 89% est: 1s  plot: [13,8] [============================================-----] 90% est: 1s  plot: [13,9] [============================================-----] 90% est: 1s  plot: [13,10] [============================================----] 91% est: 1s  plot: [13,11] [============================================----] 91% est: 1s  plot: [13,12] [============================================----] 92% est: 1s  plot: [13,13] [============================================----] 92% est: 1s  plot: [13,14] [=============================================---] 93% est: 1s  plot: [14,1] [==============================================---] 93% est: 1s  plot: [14,2] [==============================================---] 94% est: 1s  plot: [14,3] [==============================================---] 94% est: 1s  plot: [14,4] [==============================================---] 95% est: 1s  plot: [14,5] [===============================================--] 95% est: 1s  plot: [14,6] [===============================================--] 96% est: 0s  plot: [14,7] [===============================================--] 96% est: 0s  plot: [14,8] [================================================-] 97% est: 0s  plot: [14,9] [================================================-] 97% est: 0s  plot: [14,10] [===============================================-] 98% est: 0s  plot: [14,11] [===============================================-] 98% est: 0s  plot: [14,12] [================================================] 99% est: 0s  plot: [14,13] [================================================] 99% est: 0s  plot: [14,14] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/spearman_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 5s  plot: [1,3] [=-------------------------------------------------]  2% est: 6s  plot: [1,4] [=-------------------------------------------------]  2% est: 7s  plot: [1,5] [=-------------------------------------------------]  3% est: 8s  plot: [1,6] [==------------------------------------------------]  4% est: 8s  plot: [1,7] [==------------------------------------------------]  4% est: 8s  plot: [1,8] [==------------------------------------------------]  5% est: 8s  plot: [1,9] [===-----------------------------------------------]  5% est: 8s  plot: [1,10] [===----------------------------------------------]  6% est: 8s  plot: [1,11] [===----------------------------------------------]  7% est: 8s  plot: [1,12] [===----------------------------------------------]  7% est: 8s  plot: [1,13] [====---------------------------------------------]  8% est: 8s  plot: [2,1] [====----------------------------------------------]  8% est: 8s  plot: [2,2] [====----------------------------------------------]  9% est: 8s  plot: [2,3] [=====---------------------------------------------]  9% est: 8s  plot: [2,4] [=====---------------------------------------------] 10% est: 8s  plot: [2,5] [=====---------------------------------------------] 11% est: 8s  plot: [2,6] [======--------------------------------------------] 11% est: 8s  plot: [2,7] [======--------------------------------------------] 12% est: 8s  plot: [2,8] [======--------------------------------------------] 12% est: 8s  plot: [2,9] [=======-------------------------------------------] 13% est: 8s  plot: [2,10] [=======------------------------------------------] 14% est: 8s  plot: [2,11] [=======------------------------------------------] 14% est: 8s  plot: [2,12] [=======------------------------------------------] 15% est: 8s  plot: [2,13] [========-----------------------------------------] 15% est: 8s  plot: [3,1] [========------------------------------------------] 16% est: 8s  plot: [3,2] [========------------------------------------------] 17% est: 8s  plot: [3,3] [=========-----------------------------------------] 17% est: 8s  plot: [3,4] [=========-----------------------------------------] 18% est: 8s  plot: [3,5] [=========-----------------------------------------] 18% est: 8s  plot: [3,6] [=========-----------------------------------------] 19% est: 8s  plot: [3,7] [==========----------------------------------------] 20% est: 8s  plot: [3,8] [==========----------------------------------------] 20% est: 8s  plot: [3,9] [==========----------------------------------------] 21% est: 8s  plot: [3,10] [==========---------------------------------------] 21% est: 8s  plot: [3,11] [===========--------------------------------------] 22% est: 8s  plot: [3,12] [===========--------------------------------------] 22% est: 8s  plot: [3,13] [===========--------------------------------------] 23% est: 7s  plot: [4,1] [============--------------------------------------] 24% est: 7s  plot: [4,2] [============--------------------------------------] 24% est: 7s  plot: [4,3] [============--------------------------------------] 25% est: 7s  plot: [4,4] [=============-------------------------------------] 25% est: 7s  plot: [4,5] [=============-------------------------------------] 26% est: 7s  plot: [4,6] [=============-------------------------------------] 27% est: 7s  plot: [4,7] [==============------------------------------------] 27% est: 7s  plot: [4,8] [==============------------------------------------] 28% est: 7s  plot: [4,9] [==============------------------------------------] 28% est: 7s  plot: [4,10] [==============-----------------------------------] 29% est: 7s  plot: [4,11] [==============-----------------------------------] 30% est: 7s  plot: [4,12] [===============----------------------------------] 30% est: 7s  plot: [4,13] [===============----------------------------------] 31% est: 7s  plot: [5,1] [================----------------------------------] 31% est: 7s  plot: [5,2] [================----------------------------------] 32% est: 7s  plot: [5,3] [================----------------------------------] 33% est: 7s  plot: [5,4] [=================---------------------------------] 33% est: 7s  plot: [5,5] [=================---------------------------------] 34% est: 6s  plot: [5,6] [=================---------------------------------] 34% est: 6s  plot: [5,7] [=================---------------------------------] 35% est: 6s  plot: [5,8] [==================--------------------------------] 36% est: 6s  plot: [5,9] [==================--------------------------------] 36% est: 6s  plot: [5,10] [==================-------------------------------] 37% est: 6s  plot: [5,11] [==================-------------------------------] 37% est: 6s  plot: [5,12] [===================------------------------------] 38% est: 6s  plot: [5,13] [===================------------------------------] 38% est: 6s  plot: [6,1] [====================------------------------------] 39% est: 6s  plot: [6,2] [====================------------------------------] 40% est: 6s  plot: [6,3] [====================------------------------------] 40% est: 6s  plot: [6,4] [====================------------------------------] 41% est: 6s  plot: [6,5] [=====================-----------------------------] 41% est: 6s  plot: [6,6] [=====================-----------------------------] 42% est: 6s  plot: [6,7] [=====================-----------------------------] 43% est: 6s  plot: [6,8] [======================----------------------------] 43% est: 6s  plot: [6,9] [======================----------------------------] 44% est: 6s  plot: [6,10] [======================---------------------------] 44% est: 6s  plot: [6,11] [======================---------------------------] 45% est: 5s  plot: [6,12] [======================---------------------------] 46% est: 5s  plot: [6,13] [=======================--------------------------] 46% est: 5s  plot: [7,1] [=======================---------------------------] 47% est: 5s  plot: [7,2] [========================--------------------------] 47% est: 5s  plot: [7,3] [========================--------------------------] 48% est: 5s  plot: [7,4] [========================--------------------------] 49% est: 5s  plot: [7,5] [=========================-------------------------] 49% est: 5s  plot: [7,6] [=========================-------------------------] 50% est: 5s  plot: [7,7] [=========================-------------------------] 50% est: 5s  plot: [7,8] [=========================-------------------------] 51% est: 5s  plot: [7,9] [==========================------------------------] 51% est: 5s  plot: [7,10] [==========================-----------------------] 52% est: 5s  plot: [7,11] [==========================-----------------------] 53% est: 5s  plot: [7,12] [==========================-----------------------] 53% est: 5s  plot: [7,13] [==========================-----------------------] 54% est: 5s  plot: [8,1] [===========================-----------------------] 54% est: 4s  plot: [8,2] [============================----------------------] 55% est: 4s  plot: [8,3] [============================----------------------] 56% est: 4s  plot: [8,4] [============================----------------------] 56% est: 4s  plot: [8,5] [============================----------------------] 57% est: 4s  plot: [8,6] [=============================---------------------] 57% est: 4s  plot: [8,7] [=============================---------------------] 58% est: 4s  plot: [8,8] [=============================---------------------] 59% est: 4s  plot: [8,9] [==============================--------------------] 59% est: 4s  plot: [8,10] [=============================--------------------] 60% est: 4s  plot: [8,11] [==============================-------------------] 60% est: 4s  plot: [8,12] [==============================-------------------] 61% est: 4s  plot: [8,13] [==============================-------------------] 62% est: 4s  plot: [9,1] [===============================-------------------] 62% est: 4s  plot: [9,2] [===============================-------------------] 63% est: 4s  plot: [9,3] [================================------------------] 63% est: 4s  plot: [9,4] [================================------------------] 64% est: 3s  plot: [9,5] [================================------------------] 64% est: 3s  plot: [9,6] [=================================-----------------] 65% est: 3s  plot: [9,7] [=================================-----------------] 66% est: 3s  plot: [9,8] [=================================-----------------] 66% est: 3s  plot: [9,9] [=================================-----------------] 67% est: 3s  plot: [9,10] [=================================----------------] 67% est: 3s  plot: [9,11] [=================================----------------] 68% est: 3s  plot: [9,12] [==================================---------------] 69% est: 3s  plot: [9,13] [==================================---------------] 69% est: 3s  plot: [10,1] [==================================---------------] 70% est: 3s  plot: [10,2] [===================================--------------] 70% est: 3s  plot: [10,3] [===================================--------------] 71% est: 3s  plot: [10,4] [===================================--------------] 72% est: 3s  plot: [10,5] [===================================--------------] 72% est: 3s  plot: [10,6] [====================================-------------] 73% est: 3s  plot: [10,7] [====================================-------------] 73% est: 3s  plot: [10,8] [====================================-------------] 74% est: 3s  plot: [10,9] [=====================================------------] 75% est: 2s  plot: [10,10] [====================================------------] 75% est: 2s  plot: [10,11] [====================================------------] 76% est: 2s  plot: [10,12] [=====================================-----------] 76% est: 2s  plot: [10,13] [=====================================-----------] 77% est: 2s  plot: [11,1] [======================================-----------] 78% est: 2s  plot: [11,2] [======================================-----------] 78% est: 2s  plot: [11,3] [=======================================----------] 79% est: 2s  plot: [11,4] [=======================================----------] 79% est: 2s  plot: [11,5] [=======================================----------] 80% est: 2s  plot: [11,6] [=======================================----------] 80% est: 2s  plot: [11,7] [========================================---------] 81% est: 2s  plot: [11,8] [========================================---------] 82% est: 2s  plot: [11,9] [========================================---------] 82% est: 2s  plot: [11,10] [========================================--------] 83% est: 2s  plot: [11,11] [========================================--------] 83% est: 2s  plot: [11,12] [========================================--------] 84% est: 2s  plot: [11,13] [=========================================-------] 85% est: 1s  plot: [12,1] [==========================================-------] 85% est: 1s  plot: [12,2] [==========================================-------] 86% est: 1s  plot: [12,3] [==========================================-------] 86% est: 1s  plot: [12,4] [===========================================------] 87% est: 1s  plot: [12,5] [===========================================------] 88% est: 1s  plot: [12,6] [===========================================------] 88% est: 1s  plot: [12,7] [===========================================------] 89% est: 1s  plot: [12,8] [============================================-----] 89% est: 1s  plot: [12,9] [============================================-----] 90% est: 1s  plot: [12,10] [===========================================-----] 91% est: 1s  plot: [12,11] [============================================----] 91% est: 1s  plot: [12,12] [============================================----] 92% est: 1s  plot: [12,13] [============================================----] 92% est: 1s  plot: [13,1] [==============================================---] 93% est: 1s  plot: [13,2] [==============================================---] 93% est: 1s  plot: [13,3] [==============================================---] 94% est: 1s  plot: [13,4] [==============================================---] 95% est: 1s  plot: [13,5] [===============================================--] 95% est: 0s  plot: [13,6] [===============================================--] 96% est: 0s  plot: [13,7] [===============================================--] 96% est: 0s  plot: [13,8] [================================================-] 97% est: 0s  plot: [13,9] [================================================-] 98% est: 0s  plot: [13,10] [===============================================-] 98% est: 0s  plot: [13,11] [===============================================-] 99% est: 0s  plot: [13,12] [================================================] 99% est: 0s  plot: [13,13] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/spearman_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/kendall_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 5s  plot: [1,3] [=-------------------------------------------------]  2% est: 6s  plot: [1,4] [=-------------------------------------------------]  3% est: 7s  plot: [1,5] [==------------------------------------------------]  3% est: 7s  plot: [1,6] [==------------------------------------------------]  4% est: 7s  plot: [1,7] [==------------------------------------------------]  5% est: 7s  plot: [1,8] [===-----------------------------------------------]  6% est: 7s  plot: [1,9] [===-----------------------------------------------]  6% est: 8s  plot: [1,10] [===----------------------------------------------]  7% est: 8s  plot: [1,11] [====---------------------------------------------]  8% est: 8s  plot: [1,12] [====---------------------------------------------]  8% est: 9s  plot: [2,1] [=====---------------------------------------------]  9% est: 9s  plot: [2,2] [=====---------------------------------------------] 10% est: 8s  plot: [2,3] [=====---------------------------------------------] 10% est: 8s  plot: [2,4] [======--------------------------------------------] 11% est: 8s  plot: [2,5] [======--------------------------------------------] 12% est: 8s  plot: [2,6] [======--------------------------------------------] 12% est: 8s  plot: [2,7] [=======-------------------------------------------] 13% est: 8s  plot: [2,8] [=======-------------------------------------------] 14% est: 8s  plot: [2,9] [=======-------------------------------------------] 15% est: 8s  plot: [2,10] [=======------------------------------------------] 15% est: 7s  plot: [2,11] [========-----------------------------------------] 16% est: 7s  plot: [2,12] [========-----------------------------------------] 17% est: 7s  plot: [3,1] [=========-----------------------------------------] 17% est: 7s  plot: [3,2] [=========-----------------------------------------] 18% est: 7s  plot: [3,3] [=========-----------------------------------------] 19% est: 7s  plot: [3,4] [==========----------------------------------------] 19% est: 7s  plot: [3,5] [==========----------------------------------------] 20% est: 7s  plot: [3,6] [==========----------------------------------------] 21% est: 7s  plot: [3,7] [===========---------------------------------------] 22% est: 7s  plot: [3,8] [===========---------------------------------------] 22% est: 7s  plot: [3,9] [===========---------------------------------------] 23% est: 7s  plot: [3,10] [============-------------------------------------] 24% est: 7s  plot: [3,11] [============-------------------------------------] 24% est: 6s  plot: [3,12] [============-------------------------------------] 25% est: 6s  plot: [4,1] [=============-------------------------------------] 26% est: 6s  plot: [4,2] [=============-------------------------------------] 26% est: 6s  plot: [4,3] [==============------------------------------------] 27% est: 6s  plot: [4,4] [==============------------------------------------] 28% est: 6s  plot: [4,5] [==============------------------------------------] 28% est: 6s  plot: [4,6] [===============-----------------------------------] 29% est: 6s  plot: [4,7] [===============-----------------------------------] 30% est: 6s  plot: [4,8] [===============-----------------------------------] 31% est: 6s  plot: [4,9] [================----------------------------------] 31% est: 6s  plot: [4,10] [================---------------------------------] 32% est: 6s  plot: [4,11] [================---------------------------------] 33% est: 6s  plot: [4,12] [================---------------------------------] 33% est: 6s  plot: [5,1] [=================---------------------------------] 34% est: 6s  plot: [5,2] [=================---------------------------------] 35% est: 5s  plot: [5,3] [==================--------------------------------] 35% est: 5s  plot: [5,4] [==================--------------------------------] 36% est: 5s  plot: [5,5] [==================--------------------------------] 37% est: 5s  plot: [5,6] [===================-------------------------------] 38% est: 5s  plot: [5,7] [===================-------------------------------] 38% est: 5s  plot: [5,8] [===================-------------------------------] 39% est: 5s  plot: [5,9] [====================------------------------------] 40% est: 5s  plot: [5,10] [====================-----------------------------] 40% est: 5s  plot: [5,11] [====================-----------------------------] 41% est: 5s  plot: [5,12] [====================-----------------------------] 42% est: 5s  plot: [6,1] [=====================-----------------------------] 42% est: 5s  plot: [6,2] [======================----------------------------] 43% est: 5s  plot: [6,3] [======================----------------------------] 44% est: 5s  plot: [6,4] [======================----------------------------] 44% est: 5s  plot: [6,5] [=======================---------------------------] 45% est: 5s  plot: [6,6] [=======================---------------------------] 46% est: 4s  plot: [6,7] [=======================---------------------------] 47% est: 4s  plot: [6,8] [========================--------------------------] 47% est: 4s  plot: [6,9] [========================--------------------------] 48% est: 4s  plot: [6,10] [========================-------------------------] 49% est: 4s  plot: [6,11] [========================-------------------------] 49% est: 4s  plot: [6,12] [========================-------------------------] 50% est: 4s  plot: [7,1] [=========================-------------------------] 51% est: 4s  plot: [7,2] [==========================------------------------] 51% est: 4s  plot: [7,3] [==========================------------------------] 52% est: 4s  plot: [7,4] [==========================------------------------] 53% est: 4s  plot: [7,5] [===========================-----------------------] 53% est: 4s  plot: [7,6] [===========================-----------------------] 54% est: 4s  plot: [7,7] [===========================-----------------------] 55% est: 4s  plot: [7,8] [============================----------------------] 56% est: 4s  plot: [7,9] [============================----------------------] 56% est: 4s  plot: [7,10] [============================---------------------] 57% est: 4s  plot: [7,11] [============================---------------------] 58% est: 3s  plot: [7,12] [=============================--------------------] 58% est: 3s  plot: [8,1] [==============================--------------------] 59% est: 3s  plot: [8,2] [==============================--------------------] 60% est: 3s  plot: [8,3] [==============================--------------------] 60% est: 3s  plot: [8,4] [===============================-------------------] 61% est: 3s  plot: [8,5] [===============================-------------------] 62% est: 3s  plot: [8,6] [===============================-------------------] 62% est: 3s  plot: [8,7] [================================------------------] 63% est: 3s  plot: [8,8] [================================------------------] 64% est: 3s  plot: [8,9] [================================------------------] 65% est: 3s  plot: [8,10] [================================-----------------] 65% est: 3s  plot: [8,11] [================================-----------------] 66% est: 3s  plot: [8,12] [=================================----------------] 67% est: 3s  plot: [9,1] [==================================----------------] 67% est: 3s  plot: [9,2] [==================================----------------] 68% est: 3s  plot: [9,3] [==================================----------------] 69% est: 3s  plot: [9,4] [===================================---------------] 69% est: 2s  plot: [9,5] [===================================---------------] 70% est: 2s  plot: [9,6] [===================================---------------] 71% est: 2s  plot: [9,7] [====================================--------------] 72% est: 2s  plot: [9,8] [====================================--------------] 72% est: 2s  plot: [9,9] [====================================--------------] 73% est: 2s  plot: [9,10] [====================================-------------] 74% est: 2s  plot: [9,11] [====================================-------------] 74% est: 2s  plot: [9,12] [=====================================------------] 75% est: 2s  plot: [10,1] [=====================================------------] 76% est: 2s  plot: [10,2] [=====================================------------] 76% est: 2s  plot: [10,3] [======================================-----------] 77% est: 2s  plot: [10,4] [======================================-----------] 78% est: 2s  plot: [10,5] [======================================-----------] 78% est: 2s  plot: [10,6] [=======================================----------] 79% est: 2s  plot: [10,7] [=======================================----------] 80% est: 2s  plot: [10,8] [=======================================----------] 81% est: 2s  plot: [10,9] [========================================---------] 81% est: 1s  plot: [10,10] [=======================================---------] 82% est: 1s  plot: [10,11] [========================================--------] 83% est: 1s  plot: [10,12] [========================================--------] 83% est: 1s  plot: [11,1] [=========================================--------] 84% est: 1s  plot: [11,2] [==========================================-------] 85% est: 1s  plot: [11,3] [==========================================-------] 85% est: 1s  plot: [11,4] [==========================================-------] 86% est: 1s  plot: [11,5] [===========================================------] 87% est: 1s  plot: [11,6] [===========================================------] 88% est: 1s  plot: [11,7] [===========================================------] 88% est: 1s  plot: [11,8] [============================================-----] 89% est: 1s  plot: [11,9] [============================================-----] 90% est: 1s  plot: [11,10] [===========================================-----] 90% est: 1s  plot: [11,11] [============================================----] 91% est: 1s  plot: [11,12] [============================================----] 92% est: 1s  plot: [12,1] [=============================================----] 92% est: 1s  plot: [12,2] [==============================================---] 93% est: 1s  plot: [12,3] [==============================================---] 94% est: 1s  plot: [12,4] [==============================================---] 94% est: 0s  plot: [12,5] [===============================================--] 95% est: 0s  plot: [12,6] [===============================================--] 96% est: 0s  plot: [12,7] [===============================================--] 97% est: 0s  plot: [12,8] [================================================-] 97% est: 0s  plot: [12,9] [================================================-] 98% est: 0s  plot: [12,10] [===============================================-] 99% est: 0s  plot: [12,11] [================================================] 99% est: 0s  plot: [12,12] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/kendall_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
#+end_example

Open one of these =eps= files with:

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.eps&
#+end_src

#+RESULTS:

What are the common rows between all correlations?

#+HEADER: :results output :session *R* :exports both
#+begin_src R

print(cor_pearson)
print(cor_spearman)
print(cor_kendall)

inner_join(cor_pearson[ c("First.Variable", "Second.Variable")],
           cor_spearman[ c("First.Variable", "Second.Variable")])

inner_join(cor_pearson[ c("First.Variable", "Second.Variable")],
           cor_kendall[ c("First.Variable", "Second.Variable")])

inner_join(cor_spearman[ c("First.Variable", "Second.Variable")],
           cor_kendall[ c("First.Variable", "Second.Variable")])

inner_join(inner_join(cor_pearson[ c("First.Variable", "Second.Variable")],
           cor_spearman[ c("First.Variable", "Second.Variable")]),
           cor_kendall[ c("First.Variable", "Second.Variable")])

#+end_src

#+RESULTS:
#+begin_example
                               First.Variable Second.Variable Correlation
677                set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                   Blocks             RAM   1.0000000
370  set_operation_latency.unsigned_divide_64            FMax   0.9580363
1238             set_parameter.MB_MINIMIZE_HW             DPS   0.8393787
1050                                   Cycles          Blocks  -0.8387330
1201                                   Cycles             RAM  -0.8387330
803  set_operation_latency.signed_multiply_16            Regs   0.7855710
887   set_resource_constraint.altfp_divide_32            Regs   0.7689415
852       set_operation_latency.signed_add_64            Regs   0.7659582
394      set_resource_constraint.signed_add_8            FMax   0.7571533
                                First.Variable Second.Variable Correlation
677                 set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                    Blocks             RAM   1.0000000
1281                set_parameter.MULTIPUMPING             DPS   0.8090146
1355                                      Pins             DPS  -0.8090146
1238              set_parameter.MB_MINIMIZE_HW             DPS   0.7857013
331  set_resource_constraint.altfp_subtract_16            FMax   0.7223399
370   set_operation_latency.unsigned_divide_64            FMax   0.7210865
219   set_operation_latency.unsigned_divide_64          Cycles   0.7129351
821        set_operation_latency.signed_add_32            Regs   0.7084865
415      set_operation_latency.altfp_divide_32            FMax  -0.6974540
                                First.Variable Second.Variable Correlation
677                 set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                    Blocks             RAM   1.0000000
1281                set_parameter.MULTIPUMPING             DPS   0.7561760
1355                                      Pins             DPS  -0.7561760
1238              set_parameter.MB_MINIMIZE_HW             DPS   0.7343854
984                 set_parameter.PIPELINE_ALL          Blocks   0.6139115
1135                set_parameter.PIPELINE_ALL             RAM   0.6139115
821        set_operation_latency.signed_add_32            Regs   0.6039735
370   set_operation_latency.unsigned_divide_64            FMax   0.5961823
331  set_resource_constraint.altfp_subtract_16            FMax   0.5900102
Joining, by = c("First.Variable", "Second.Variable")
                            First.Variable Second.Variable
1               set_parameter.MULTIPUMPING            Pins
2                                   Blocks             RAM
3 set_operation_latency.unsigned_divide_64            FMax
4             set_parameter.MB_MINIMIZE_HW             DPS
Joining, by = c("First.Variable", "Second.Variable")
                            First.Variable Second.Variable
1               set_parameter.MULTIPUMPING            Pins
2                                   Blocks             RAM
3 set_operation_latency.unsigned_divide_64            FMax
4             set_parameter.MB_MINIMIZE_HW             DPS
Joining, by = c("First.Variable", "Second.Variable")
                             First.Variable Second.Variable
1                set_parameter.MULTIPUMPING            Pins
2                                    Blocks             RAM
3                set_parameter.MULTIPUMPING             DPS
4                                      Pins             DPS
5              set_parameter.MB_MINIMIZE_HW             DPS
6 set_resource_constraint.altfp_subtract_16            FMax
7  set_operation_latency.unsigned_divide_64            FMax
8       set_operation_latency.signed_add_32            Regs
Joining, by = c("First.Variable", "Second.Variable")
Joining, by = c("First.Variable", "Second.Variable")
                            First.Variable Second.Variable
1               set_parameter.MULTIPUMPING            Pins
2                                   Blocks             RAM
3 set_operation_latency.unsigned_divide_64            FMax
4             set_parameter.MB_MINIMIZE_HW             DPS
#+end_example

*** [2017-12-13 Wed]
**** Plotting More Correlations ([[More Attempts at Correlations][Continued from Here]]) :R:Code:FPGA:Autotuning:DataVis:
***** Setup
Make sure you have the data:

#+CALL: update_legup_tuner()

#+RESULTS:
: Already up to date.

Import dependencies, set the graphics output, and define paths:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :var repository_dir=repository_dir
#+begin_src R

library(dplyr)
library(GGally)

setEPS()

csv_dir <- c(repository_dir,
             "/legup-tuner/",
             "post_place_and_route/py/results/r_scripts/",
             "data")

plot_dir <- c(repository_dir,
              "/legup-tuner/",
              "post_place_and_route/py/results/r_scripts/",
              "correlations")

experiments <- c("balanced", "area", "perf", "perflat")

applications <- c("dfadd", "dfdiv", "dfmul", "sha", "motion", "adpcm",
                  "dfsin", "aes", "blowfish", "gsm", "mips")

hardware_metrics <- c("WNS", "Cycles", "FMax", "LUs", "Pins", "Regs",
                      "Blocks", "RAM", "DPS")

dir.create(paste(plot_dir, collapse = ""))

#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Attaching package: ‘GGally’

The following object is masked from ‘package:dplyr’:

    nasa
Warning message:
In dir.create(paste(plot_dir, collapse = "")) :
  '/home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations' already exists
#+end_example
***** Load Data and Plot Functions
#+HEADER: :results output :session *R* :exports both
#+begin_src R
load_data <- function(application, experiments) {
    data       <- data.frame()

    for (experiment in experiments) {
        new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                                   experiment, paste(application,
                                                     ".csv",
                                                     sep = ""),
                                   sep = "/"),
                             header = TRUE, sep = ",")

        new_data <- as.data.frame(new_data)
        new_data <- new_data[is.finite(new_data$WNS),]

        if (ncol(data) == 0) {
            data <- new_data
        } else {
            data <- rbind(data, new_data)
        }
    }

    data  <- as.data.frame(sapply(data, as.numeric))
    return(data)
}
#+end_src

#+RESULTS:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R
plot_correlation_columns <- function (data, correlations, cor_method,
                                      application) {
    postscript(paste(paste(plot_dir, collapse = ""), paste(cor_method,
                                                           "_largest_",
                                                           application,
                                                           ".eps",
                                                           sep = ""),
                     sep = "/"),
               width = 20, height = 20)

    columns <- unique(c(as.vector(correlations$First.Variable),
                        as.vector(correlations$Second.Variable)))

    ggpairs_plot <- ggpairs(data, columns = columns)

    print(ggpairs_plot)

    print(paste(paste("Plot generated at ",
                      paste(plot_dir, collapse = ""),
                      sep = ""), paste(cor_method, "_largest_",
                                       application, ".eps",
                                       sep = ""),
                sep = "/"))

    dev.off()
}

#+end_src

#+RESULTS:

***** Pearson, Spearman and Kendall Correlations
The =sorted_correlations= function filters correlation matrices, getting
only rows with one of the hardware metrics. Then, it sorts rows by
correlation.

#+HEADER: :results output :session *R* :exports both
#+begin_src R
#
# Function adapted from:
#
#   https://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/latest/src/multivariateanalysis.html#calculating-correlations-for-multivariate-data
#
sorted_correlations <- function(data, datapoints) {
    names(data) <- c("First.Variable", "Second.Variable","Correlation")

    #
    # Restricting comparisons to correlations that contain a hardware metric
    #
    data <- dplyr::filter(data, grepl(paste(hardware_metrics,
                                            collapse = "|"),
                                      data$Second.Variable))

    head(data[order(abs(data$Correlation), decreasing = T), ],
         n = datapoints)
}

#+end_src

#+RESULTS:

Computing the correlations using variable =cor= methods:

#+HEADER: :results output :session *R* :exports both
#+begin_src R
plot_correlations <- function(application, experiments, cor_method,
                              plot_columns) {
    data       <- data.frame()

    for (experiment in experiments) {
        new_data <- read.csv(paste(paste(csv_dir, collapse = ""),
                                   experiment, paste(application,
                                                     ".csv",
                                                     sep = ""),
                                   sep = "/"),
                             header = TRUE, sep = ",")

        new_data <- as.data.frame(new_data)
        new_data <- new_data[is.finite(new_data$WNS),]

        if (ncol(data) == 0) {
            data <- new_data
        } else {
            data <- rbind(data, new_data)
        }
    }

    data  <- as.data.frame(sapply(data, as.numeric))

    cormatrix <- cor(data, method = cor_method)
    diag(cormatrix) <- 0
    cormatrix[lower.tri(cormatrix)] <- 0
    cormatrix <- as.data.frame(as.table(cormatrix))

    correlation <- sorted_correlations(cormatrix, 120)

    print(paste("Generating 120 strongest correlations for '", application,
                "'...", sep = ""))

    write.csv(correlation, file = paste(paste(plot_dir, collapse = ""),
                                        paste(cor_method, "_", application,
                                              ".csv", sep = ""), sep = "/"))

    print(paste(paste("CSV generated at ", 
                      paste(plot_dir, collapse = ""),
                      sep = ""), paste(cor_method, "_", application,
                                       ".csv", sep = ""),
                sep = "/"))

    short_correlation <- correlation[1:plot_columns, ]

    print(paste("Generating scatter plots of the ",
                plot_columns, " strongest correlations for '",
                application, "'...", sep = ""))

    postscript(paste(paste(plot_dir, collapse = ""), paste(cor_method,
                                                           "_",
                                                           application,
                                                           ".eps",
                                                           sep = ""),
                     sep = "/"),
               width = 20, height = 20)
    
    columns <- unique(c(as.vector(short_correlation$First.Variable),
                        as.vector(short_correlation$Second.Variable)))

    ggpairs_plot <- ggpairs(data, columns = columns)
    
    print(ggpairs_plot)

    print(paste(paste("Plot generated at ",
                      paste(plot_dir, collapse = ""),
                      sep = ""), paste(cor_method, "_", application,
                                       ".eps", sep = ""),
                sep = "/"))

    dev.off()
    
    return(short_correlation)
}

#+end_src

#+RESULTS:

Plotting the 10 largest correlations:

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R

application <- "dfdiv"

cor_pearson <- plot_correlations(application, experiments, "pearson", 10)
cor_spearman <- plot_correlations(application, experiments, "spearman", 10)
cor_kendall <- plot_correlations(application, experiments, "kendall", 10)

#+end_src

#+RESULTS:
#+begin_example
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 6s  plot: [1,3] [=-------------------------------------------------]  2% est: 8s  plot: [1,4] [=-------------------------------------------------]  2% est: 9s  plot: [1,5] [=-------------------------------------------------]  3% est:10s  plot: [1,6] [==------------------------------------------------]  3% est:10s  plot: [1,7] [==------------------------------------------------]  4% est:10s  plot: [1,8] [==------------------------------------------------]  4% est:12s  plot: [1,9] [==------------------------------------------------]  5% est:12s  plot: [1,10] [==-----------------------------------------------]  5% est:12s  plot: [1,11] [===----------------------------------------------]  6% est:12s  plot: [1,12] [===----------------------------------------------]  6% est:11s  plot: [1,13] [===----------------------------------------------]  7% est:11s  plot: [1,14] [====---------------------------------------------]  7% est:11s  plot: [2,1] [====----------------------------------------------]  8% est:11s  plot: [2,2] [====----------------------------------------------]  8% est:11s  plot: [2,3] [====----------------------------------------------]  9% est:11s  plot: [2,4] [=====---------------------------------------------]  9% est:11s  plot: [2,5] [=====---------------------------------------------] 10% est:10s  plot: [2,6] [=====---------------------------------------------] 10% est:10s  plot: [2,7] [=====---------------------------------------------] 11% est:10s  plot: [2,8] [======--------------------------------------------] 11% est:10s  plot: [2,9] [======--------------------------------------------] 12% est:10s  plot: [2,10] [======-------------------------------------------] 12% est:10s  plot: [2,11] [======-------------------------------------------] 13% est:10s  plot: [2,12] [======-------------------------------------------] 13% est:10s  plot: [2,13] [=======------------------------------------------] 14% est:10s  plot: [2,14] [=======------------------------------------------] 14% est:10s  plot: [3,1] [=======-------------------------------------------] 15% est:10s  plot: [3,2] [========------------------------------------------] 15% est:10s  plot: [3,3] [========------------------------------------------] 16% est: 9s  plot: [3,4] [========------------------------------------------] 16% est: 9s  plot: [3,5] [========------------------------------------------] 17% est: 9s  plot: [3,6] [=========-----------------------------------------] 17% est: 9s  plot: [3,7] [=========-----------------------------------------] 18% est: 9s  plot: [3,8] [=========-----------------------------------------] 18% est: 9s  plot: [3,9] [=========-----------------------------------------] 19% est: 9s  plot: [3,10] [==========---------------------------------------] 19% est: 9s  plot: [3,11] [==========---------------------------------------] 20% est: 9s  plot: [3,12] [==========---------------------------------------] 20% est: 9s  plot: [3,13] [==========---------------------------------------] 21% est: 9s  plot: [3,14] [==========---------------------------------------] 21% est: 9s  plot: [4,1] [===========---------------------------------------] 22% est: 9s  plot: [4,2] [===========---------------------------------------] 22% est: 9s  plot: [4,3] [===========---------------------------------------] 23% est: 9s  plot: [4,4] [============--------------------------------------] 23% est: 9s  plot: [4,5] [============--------------------------------------] 24% est: 8s  plot: [4,6] [============--------------------------------------] 24% est: 8s  plot: [4,7] [============--------------------------------------] 25% est: 8s  plot: [4,8] [=============-------------------------------------] 26% est: 8s  plot: [4,9] [=============-------------------------------------] 26% est: 8s  plot: [4,10] [=============------------------------------------] 27% est: 8s  plot: [4,11] [=============------------------------------------] 27% est: 8s  plot: [4,12] [=============------------------------------------] 28% est: 8s  plot: [4,13] [==============-----------------------------------] 28% est: 8s  plot: [4,14] [==============-----------------------------------] 29% est: 8s  plot: [5,1] [===============-----------------------------------] 29% est: 8s  plot: [5,2] [===============-----------------------------------] 30% est: 8s  plot: [5,3] [===============-----------------------------------] 30% est: 8s  plot: [5,4] [===============-----------------------------------] 31% est: 8s  plot: [5,5] [================----------------------------------] 31% est: 8s  plot: [5,6] [================----------------------------------] 32% est: 8s  plot: [5,7] [================----------------------------------] 32% est: 8s  plot: [5,8] [================----------------------------------] 33% est: 8s  plot: [5,9] [=================---------------------------------] 33% est: 7s  plot: [5,10] [================---------------------------------] 34% est: 7s  plot: [5,11] [=================--------------------------------] 34% est: 7s  plot: [5,12] [=================--------------------------------] 35% est: 7s  plot: [5,13] [=================--------------------------------] 35% est: 7s  plot: [5,14] [==================-------------------------------] 36% est: 7s  plot: [6,1] [==================--------------------------------] 36% est: 7s  plot: [6,2] [==================--------------------------------] 37% est: 7s  plot: [6,3] [===================-------------------------------] 37% est: 7s  plot: [6,4] [===================-------------------------------] 38% est: 7s  plot: [6,5] [===================-------------------------------] 38% est: 7s  plot: [6,6] [===================-------------------------------] 39% est: 7s  plot: [6,7] [====================------------------------------] 39% est: 7s  plot: [6,8] [====================------------------------------] 40% est: 7s  plot: [6,9] [====================------------------------------] 40% est: 7s  plot: [6,10] [====================-----------------------------] 41% est: 7s  plot: [6,11] [====================-----------------------------] 41% est: 7s  plot: [6,12] [====================-----------------------------] 42% est: 7s  plot: [6,13] [=====================----------------------------] 42% est: 6s  plot: [6,14] [=====================----------------------------] 43% est: 6s  plot: [7,1] [======================----------------------------] 43% est: 6s  plot: [7,2] [======================----------------------------] 44% est: 6s  plot: [7,3] [======================----------------------------] 44% est: 6s  plot: [7,4] [======================----------------------------] 45% est: 6s  plot: [7,5] [=======================---------------------------] 45% est: 6s  plot: [7,6] [=======================---------------------------] 46% est: 6s  plot: [7,7] [=======================---------------------------] 46% est: 6s  plot: [7,8] [=======================---------------------------] 47% est: 6s  plot: [7,9] [========================--------------------------] 47% est: 6s  plot: [7,10] [========================-------------------------] 48% est: 6s  plot: [7,11] [========================-------------------------] 48% est: 6s  plot: [7,12] [========================-------------------------] 49% est: 6s  plot: [7,13] [========================-------------------------] 49% est: 6s  plot: [7,14] [========================-------------------------] 50% est: 6s  plot: [8,1] [=========================-------------------------] 51% est: 6s  plot: [8,2] [==========================------------------------] 51% est: 5s  plot: [8,3] [==========================------------------------] 52% est: 5s  plot: [8,4] [==========================------------------------] 52% est: 5s  plot: [8,5] [==========================------------------------] 53% est: 5s  plot: [8,6] [===========================-----------------------] 53% est: 5s  plot: [8,7] [===========================-----------------------] 54% est: 5s  plot: [8,8] [===========================-----------------------] 54% est: 5s  plot: [8,9] [===========================-----------------------] 55% est: 5s  plot: [8,10] [===========================----------------------] 55% est: 5s  plot: [8,11] [===========================----------------------] 56% est: 5s  plot: [8,12] [===========================----------------------] 56% est: 5s  plot: [8,13] [============================---------------------] 57% est: 5s  plot: [8,14] [============================---------------------] 57% est: 5s  plot: [9,1] [=============================---------------------] 58% est: 5s  plot: [9,2] [=============================---------------------] 58% est: 5s  plot: [9,3] [=============================---------------------] 59% est: 5s  plot: [9,4] [==============================--------------------] 59% est: 5s  plot: [9,5] [==============================--------------------] 60% est: 4s  plot: [9,6] [==============================--------------------] 60% est: 4s  plot: [9,7] [==============================--------------------] 61% est: 4s  plot: [9,8] [===============================-------------------] 61% est: 4s  plot: [9,9] [===============================-------------------] 62% est: 4s  plot: [9,10] [==============================-------------------] 62% est: 4s  plot: [9,11] [===============================------------------] 63% est: 4s  plot: [9,12] [===============================------------------] 63% est: 4s  plot: [9,13] [===============================------------------] 64% est: 4s  plot: [9,14] [================================-----------------] 64% est: 4s  plot: [10,1] [================================-----------------] 65% est: 4s  plot: [10,2] [================================-----------------] 65% est: 4s  plot: [10,3] [================================-----------------] 66% est: 4s  plot: [10,4] [================================-----------------] 66% est: 4s  plot: [10,5] [=================================----------------] 67% est: 4s  plot: [10,6] [=================================----------------] 67% est: 4s  plot: [10,7] [=================================----------------] 68% est: 4s  plot: [10,8] [==================================---------------] 68% est: 3s  plot: [10,9] [==================================---------------] 69% est: 3s  plot: [10,10] [=================================---------------] 69% est: 3s  plot: [10,11] [==================================--------------] 70% est: 3s  plot: [10,12] [==================================--------------] 70% est: 3s  plot: [10,13] [==================================--------------] 71% est: 3s  plot: [10,14] [==================================--------------] 71% est: 3s  plot: [11,1] [===================================--------------] 72% est: 3s  plot: [11,2] [====================================-------------] 72% est: 3s  plot: [11,3] [====================================-------------] 73% est: 3s  plot: [11,4] [====================================-------------] 73% est: 3s  plot: [11,5] [====================================-------------] 74% est: 3s  plot: [11,6] [====================================-------------] 74% est: 3s  plot: [11,7] [=====================================------------] 75% est: 3s  plot: [11,8] [=====================================------------] 76% est: 3s  plot: [11,9] [=====================================------------] 76% est: 3s  plot: [11,10] [=====================================-----------] 77% est: 3s  plot: [11,11] [=====================================-----------] 77% est: 3s  plot: [11,12] [=====================================-----------] 78% est: 2s  plot: [11,13] [=====================================-----------] 78% est: 2s  plot: [11,14] [======================================----------] 79% est: 2s  plot: [12,1] [=======================================----------] 79% est: 2s  plot: [12,2] [=======================================----------] 80% est: 2s  plot: [12,3] [=======================================----------] 80% est: 2s  plot: [12,4] [========================================---------] 81% est: 2s  plot: [12,5] [========================================---------] 81% est: 2s  plot: [12,6] [========================================---------] 82% est: 2s  plot: [12,7] [========================================---------] 82% est: 2s  plot: [12,8] [========================================---------] 83% est: 2s  plot: [12,9] [=========================================--------] 83% est: 2s  plot: [12,10] [========================================--------] 84% est: 2s  plot: [12,11] [========================================--------] 84% est: 2s  plot: [12,12] [=========================================-------] 85% est: 2s  plot: [12,13] [=========================================-------] 85% est: 2s  plot: [12,14] [=========================================-------] 86% est: 2s  plot: [13,1] [==========================================-------] 86% est: 2s  plot: [13,2] [==========================================-------] 87% est: 1s  plot: [13,3] [===========================================------] 87% est: 1s  plot: [13,4] [===========================================------] 88% est: 1s  plot: [13,5] [===========================================------] 88% est: 1s  plot: [13,6] [============================================-----] 89% est: 1s  plot: [13,7] [============================================-----] 89% est: 1s  plot: [13,8] [============================================-----] 90% est: 1s  plot: [13,9] [============================================-----] 90% est: 1s  plot: [13,10] [============================================----] 91% est: 1s  plot: [13,11] [============================================----] 91% est: 1s  plot: [13,12] [============================================----] 92% est: 1s  plot: [13,13] [============================================----] 92% est: 1s  plot: [13,14] [=============================================---] 93% est: 1s  plot: [14,1] [==============================================---] 93% est: 1s  plot: [14,2] [==============================================---] 94% est: 1s  plot: [14,3] [==============================================---] 94% est: 1s  plot: [14,4] [==============================================---] 95% est: 1s  plot: [14,5] [===============================================--] 95% est: 1s  plot: [14,6] [===============================================--] 96% est: 0s  plot: [14,7] [===============================================--] 96% est: 0s  plot: [14,8] [================================================-] 97% est: 0s  plot: [14,9] [================================================-] 97% est: 0s  plot: [14,10] [===============================================-] 98% est: 0s  plot: [14,11] [===============================================-] 98% est: 0s  plot: [14,12] [================================================] 99% est: 0s  plot: [14,13] [================================================] 99% est: 0s  plot: [14,14] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/spearman_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 5s  plot: [1,3] [=-------------------------------------------------]  2% est: 7s  plot: [1,4] [=-------------------------------------------------]  2% est: 7s  plot: [1,5] [=-------------------------------------------------]  3% est: 8s  plot: [1,6] [==------------------------------------------------]  4% est: 8s  plot: [1,7] [==------------------------------------------------]  4% est: 8s  plot: [1,8] [==------------------------------------------------]  5% est: 8s  plot: [1,9] [===-----------------------------------------------]  5% est: 8s  plot: [1,10] [===----------------------------------------------]  6% est: 8s  plot: [1,11] [===----------------------------------------------]  7% est: 9s  plot: [1,12] [===----------------------------------------------]  7% est: 9s  plot: [1,13] [====---------------------------------------------]  8% est: 9s  plot: [2,1] [====----------------------------------------------]  8% est: 9s  plot: [2,2] [====----------------------------------------------]  9% est: 9s  plot: [2,3] [=====---------------------------------------------]  9% est: 9s  plot: [2,4] [=====---------------------------------------------] 10% est: 8s  plot: [2,5] [=====---------------------------------------------] 11% est: 8s  plot: [2,6] [======--------------------------------------------] 11% est: 8s  plot: [2,7] [======--------------------------------------------] 12% est: 8s  plot: [2,8] [======--------------------------------------------] 12% est: 8s  plot: [2,9] [=======-------------------------------------------] 13% est: 8s  plot: [2,10] [=======------------------------------------------] 14% est: 8s  plot: [2,11] [=======------------------------------------------] 14% est: 8s  plot: [2,12] [=======------------------------------------------] 15% est: 8s  plot: [2,13] [========-----------------------------------------] 15% est: 8s  plot: [3,1] [========------------------------------------------] 16% est: 8s  plot: [3,2] [========------------------------------------------] 17% est: 8s  plot: [3,3] [=========-----------------------------------------] 17% est: 8s  plot: [3,4] [=========-----------------------------------------] 18% est: 8s  plot: [3,5] [=========-----------------------------------------] 18% est: 8s  plot: [3,6] [=========-----------------------------------------] 19% est: 8s  plot: [3,7] [==========----------------------------------------] 20% est: 8s  plot: [3,8] [==========----------------------------------------] 20% est: 8s  plot: [3,9] [==========----------------------------------------] 21% est: 8s  plot: [3,10] [==========---------------------------------------] 21% est: 8s  plot: [3,11] [===========--------------------------------------] 22% est: 8s  plot: [3,12] [===========--------------------------------------] 22% est: 8s  plot: [3,13] [===========--------------------------------------] 23% est: 8s  plot: [4,1] [============--------------------------------------] 24% est: 8s  plot: [4,2] [============--------------------------------------] 24% est: 8s  plot: [4,3] [============--------------------------------------] 25% est: 7s  plot: [4,4] [=============-------------------------------------] 25% est: 7s  plot: [4,5] [=============-------------------------------------] 26% est: 7s  plot: [4,6] [=============-------------------------------------] 27% est: 7s  plot: [4,7] [==============------------------------------------] 27% est: 7s  plot: [4,8] [==============------------------------------------] 28% est: 7s  plot: [4,9] [==============------------------------------------] 28% est: 7s  plot: [4,10] [==============-----------------------------------] 29% est: 7s  plot: [4,11] [==============-----------------------------------] 30% est: 7s  plot: [4,12] [===============----------------------------------] 30% est: 7s  plot: [4,13] [===============----------------------------------] 31% est: 7s  plot: [5,1] [================----------------------------------] 31% est: 7s  plot: [5,2] [================----------------------------------] 32% est: 7s  plot: [5,3] [================----------------------------------] 33% est: 7s  plot: [5,4] [=================---------------------------------] 33% est: 7s  plot: [5,5] [=================---------------------------------] 34% est: 7s  plot: [5,6] [=================---------------------------------] 34% est: 7s  plot: [5,7] [=================---------------------------------] 35% est: 6s  plot: [5,8] [==================--------------------------------] 36% est: 6s  plot: [5,9] [==================--------------------------------] 36% est: 6s  plot: [5,10] [==================-------------------------------] 37% est: 6s  plot: [5,11] [==================-------------------------------] 37% est: 6s  plot: [5,12] [===================------------------------------] 38% est: 6s  plot: [5,13] [===================------------------------------] 38% est: 6s  plot: [6,1] [====================------------------------------] 39% est: 6s  plot: [6,2] [====================------------------------------] 40% est: 6s  plot: [6,3] [====================------------------------------] 40% est: 6s  plot: [6,4] [====================------------------------------] 41% est: 6s  plot: [6,5] [=====================-----------------------------] 41% est: 6s  plot: [6,6] [=====================-----------------------------] 42% est: 6s  plot: [6,7] [=====================-----------------------------] 43% est: 6s  plot: [6,8] [======================----------------------------] 43% est: 6s  plot: [6,9] [======================----------------------------] 44% est: 6s  plot: [6,10] [======================---------------------------] 44% est: 6s  plot: [6,11] [======================---------------------------] 45% est: 6s  plot: [6,12] [======================---------------------------] 46% est: 5s  plot: [6,13] [=======================--------------------------] 46% est: 5s  plot: [7,1] [=======================---------------------------] 47% est: 5s  plot: [7,2] [========================--------------------------] 47% est: 5s  plot: [7,3] [========================--------------------------] 48% est: 5s  plot: [7,4] [========================--------------------------] 49% est: 5s  plot: [7,5] [=========================-------------------------] 49% est: 5s  plot: [7,6] [=========================-------------------------] 50% est: 5s  plot: [7,7] [=========================-------------------------] 50% est: 5s  plot: [7,8] [=========================-------------------------] 51% est: 5s  plot: [7,9] [==========================------------------------] 51% est: 5s  plot: [7,10] [==========================-----------------------] 52% est: 5s  plot: [7,11] [==========================-----------------------] 53% est: 5s  plot: [7,12] [==========================-----------------------] 53% est: 5s  plot: [7,13] [==========================-----------------------] 54% est: 5s  plot: [8,1] [===========================-----------------------] 54% est: 5s  plot: [8,2] [============================----------------------] 55% est: 4s  plot: [8,3] [============================----------------------] 56% est: 4s  plot: [8,4] [============================----------------------] 56% est: 4s  plot: [8,5] [============================----------------------] 57% est: 4s  plot: [8,6] [=============================---------------------] 57% est: 4s  plot: [8,7] [=============================---------------------] 58% est: 4s  plot: [8,8] [=============================---------------------] 59% est: 4s  plot: [8,9] [==============================--------------------] 59% est: 4s  plot: [8,10] [=============================--------------------] 60% est: 4s  plot: [8,11] [==============================-------------------] 60% est: 4s  plot: [8,12] [==============================-------------------] 61% est: 4s  plot: [8,13] [==============================-------------------] 62% est: 4s  plot: [9,1] [===============================-------------------] 62% est: 4s  plot: [9,2] [===============================-------------------] 63% est: 4s  plot: [9,3] [================================------------------] 63% est: 4s  plot: [9,4] [================================------------------] 64% est: 4s  plot: [9,5] [================================------------------] 64% est: 3s  plot: [9,6] [=================================-----------------] 65% est: 3s  plot: [9,7] [=================================-----------------] 66% est: 3s  plot: [9,8] [=================================-----------------] 66% est: 3s  plot: [9,9] [=================================-----------------] 67% est: 3s  plot: [9,10] [=================================----------------] 67% est: 3s  plot: [9,11] [=================================----------------] 68% est: 3s  plot: [9,12] [==================================---------------] 69% est: 3s  plot: [9,13] [==================================---------------] 69% est: 3s  plot: [10,1] [==================================---------------] 70% est: 3s  plot: [10,2] [===================================--------------] 70% est: 3s  plot: [10,3] [===================================--------------] 71% est: 3s  plot: [10,4] [===================================--------------] 72% est: 3s  plot: [10,5] [===================================--------------] 72% est: 3s  plot: [10,6] [====================================-------------] 73% est: 3s  plot: [10,7] [====================================-------------] 73% est: 3s  plot: [10,8] [====================================-------------] 74% est: 2s  plot: [10,9] [=====================================------------] 75% est: 2s  plot: [10,10] [====================================------------] 75% est: 2s  plot: [10,11] [====================================------------] 76% est: 2s  plot: [10,12] [=====================================-----------] 76% est: 2s  plot: [10,13] [=====================================-----------] 77% est: 2s  plot: [11,1] [======================================-----------] 78% est: 2s  plot: [11,2] [======================================-----------] 78% est: 2s  plot: [11,3] [=======================================----------] 79% est: 2s  plot: [11,4] [=======================================----------] 79% est: 2s  plot: [11,5] [=======================================----------] 80% est: 2s  plot: [11,6] [=======================================----------] 80% est: 2s  plot: [11,7] [========================================---------] 81% est: 2s  plot: [11,8] [========================================---------] 82% est: 2s  plot: [11,9] [========================================---------] 82% est: 2s  plot: [11,10] [========================================--------] 83% est: 2s  plot: [11,11] [========================================--------] 83% est: 2s  plot: [11,12] [========================================--------] 84% est: 2s  plot: [11,13] [=========================================-------] 85% est: 1s  plot: [12,1] [==========================================-------] 85% est: 1s  plot: [12,2] [==========================================-------] 86% est: 1s  plot: [12,3] [==========================================-------] 86% est: 1s  plot: [12,4] [===========================================------] 87% est: 1s  plot: [12,5] [===========================================------] 88% est: 1s  plot: [12,6] [===========================================------] 88% est: 1s  plot: [12,7] [===========================================------] 89% est: 1s  plot: [12,8] [============================================-----] 89% est: 1s  plot: [12,9] [============================================-----] 90% est: 1s  plot: [12,10] [===========================================-----] 91% est: 1s  plot: [12,11] [============================================----] 91% est: 1s  plot: [12,12] [============================================----] 92% est: 1s  plot: [12,13] [============================================----] 92% est: 1s  plot: [13,1] [==============================================---] 93% est: 1s  plot: [13,2] [==============================================---] 93% est: 1s  plot: [13,3] [==============================================---] 94% est: 1s  plot: [13,4] [==============================================---] 95% est: 1s  plot: [13,5] [===============================================--] 95% est: 0s  plot: [13,6] [===============================================--] 96% est: 0s  plot: [13,7] [===============================================--] 96% est: 0s  plot: [13,8] [================================================-] 97% est: 0s  plot: [13,9] [================================================-] 98% est: 0s  plot: [13,10] [===============================================-] 98% est: 0s  plot: [13,11] [===============================================-] 99% est: 0s  plot: [13,12] [================================================] 99% est: 0s  plot: [13,13] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/spearman_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
[1] "Generating 120 strongest correlations for 'dfdiv'..."
[1] "CSV generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/kendall_dfdiv.csv"
[1] "Generating scatter plots of the 10 strongest correlations for 'dfdiv'..."
 plot: [1,1] [--------------------------------------------------]  1% est: 0s  plot: [1,2] [=-------------------------------------------------]  1% est: 5s  plot: [1,3] [=-------------------------------------------------]  2% est: 6s  plot: [1,4] [=-------------------------------------------------]  3% est: 7s  plot: [1,5] [==------------------------------------------------]  3% est: 7s  plot: [1,6] [==------------------------------------------------]  4% est: 7s  plot: [1,7] [==------------------------------------------------]  5% est: 7s  plot: [1,8] [===-----------------------------------------------]  6% est: 7s  plot: [1,9] [===-----------------------------------------------]  6% est: 8s  plot: [1,10] [===----------------------------------------------]  7% est: 8s  plot: [1,11] [====---------------------------------------------]  8% est: 8s  plot: [1,12] [====---------------------------------------------]  8% est: 8s  plot: [2,1] [=====---------------------------------------------]  9% est: 8s  plot: [2,2] [=====---------------------------------------------] 10% est: 8s  plot: [2,3] [=====---------------------------------------------] 10% est: 7s  plot: [2,4] [======--------------------------------------------] 11% est: 7s  plot: [2,5] [======--------------------------------------------] 12% est: 7s  plot: [2,6] [======--------------------------------------------] 12% est: 7s  plot: [2,7] [=======-------------------------------------------] 13% est: 7s  plot: [2,8] [=======-------------------------------------------] 14% est: 7s  plot: [2,9] [=======-------------------------------------------] 15% est: 7s  plot: [2,10] [=======------------------------------------------] 15% est: 7s  plot: [2,11] [========-----------------------------------------] 16% est: 7s  plot: [2,12] [========-----------------------------------------] 17% est: 7s  plot: [3,1] [=========-----------------------------------------] 17% est: 7s  plot: [3,2] [=========-----------------------------------------] 18% est: 7s  plot: [3,3] [=========-----------------------------------------] 19% est: 7s  plot: [3,4] [==========----------------------------------------] 19% est: 7s  plot: [3,5] [==========----------------------------------------] 20% est: 7s  plot: [3,6] [==========----------------------------------------] 21% est: 7s  plot: [3,7] [===========---------------------------------------] 22% est: 7s  plot: [3,8] [===========---------------------------------------] 22% est: 7s  plot: [3,9] [===========---------------------------------------] 23% est: 7s  plot: [3,10] [============-------------------------------------] 24% est: 7s  plot: [3,11] [============-------------------------------------] 24% est: 7s  plot: [3,12] [============-------------------------------------] 25% est: 7s  plot: [4,1] [=============-------------------------------------] 26% est: 6s  plot: [4,2] [=============-------------------------------------] 26% est: 6s  plot: [4,3] [==============------------------------------------] 27% est: 6s  plot: [4,4] [==============------------------------------------] 28% est: 6s  plot: [4,5] [==============------------------------------------] 28% est: 6s  plot: [4,6] [===============-----------------------------------] 29% est: 6s  plot: [4,7] [===============-----------------------------------] 30% est: 6s  plot: [4,8] [===============-----------------------------------] 31% est: 6s  plot: [4,9] [================----------------------------------] 31% est: 6s  plot: [4,10] [================---------------------------------] 32% est: 6s  plot: [4,11] [================---------------------------------] 33% est: 6s  plot: [4,12] [================---------------------------------] 33% est: 6s  plot: [5,1] [=================---------------------------------] 34% est: 6s  plot: [5,2] [=================---------------------------------] 35% est: 6s  plot: [5,3] [==================--------------------------------] 35% est: 5s  plot: [5,4] [==================--------------------------------] 36% est: 5s  plot: [5,5] [==================--------------------------------] 37% est: 5s  plot: [5,6] [===================-------------------------------] 38% est: 5s  plot: [5,7] [===================-------------------------------] 38% est: 5s  plot: [5,8] [===================-------------------------------] 39% est: 5s  plot: [5,9] [====================------------------------------] 40% est: 5s  plot: [5,10] [====================-----------------------------] 40% est: 5s  plot: [5,11] [====================-----------------------------] 41% est: 5s  plot: [5,12] [====================-----------------------------] 42% est: 5s  plot: [6,1] [=====================-----------------------------] 42% est: 5s  plot: [6,2] [======================----------------------------] 43% est: 5s  plot: [6,3] [======================----------------------------] 44% est: 5s  plot: [6,4] [======================----------------------------] 44% est: 5s  plot: [6,5] [=======================---------------------------] 45% est: 5s  plot: [6,6] [=======================---------------------------] 46% est: 4s  plot: [6,7] [=======================---------------------------] 47% est: 4s  plot: [6,8] [========================--------------------------] 47% est: 4s  plot: [6,9] [========================--------------------------] 48% est: 4s  plot: [6,10] [========================-------------------------] 49% est: 4s  plot: [6,11] [========================-------------------------] 49% est: 4s  plot: [6,12] [========================-------------------------] 50% est: 4s  plot: [7,1] [=========================-------------------------] 51% est: 4s  plot: [7,2] [==========================------------------------] 51% est: 4s  plot: [7,3] [==========================------------------------] 52% est: 4s  plot: [7,4] [==========================------------------------] 53% est: 4s  plot: [7,5] [===========================-----------------------] 53% est: 4s  plot: [7,6] [===========================-----------------------] 54% est: 4s  plot: [7,7] [===========================-----------------------] 55% est: 4s  plot: [7,8] [============================----------------------] 56% est: 4s  plot: [7,9] [============================----------------------] 56% est: 4s  plot: [7,10] [============================---------------------] 57% est: 4s  plot: [7,11] [============================---------------------] 58% est: 3s  plot: [7,12] [=============================--------------------] 58% est: 3s  plot: [8,1] [==============================--------------------] 59% est: 3s  plot: [8,2] [==============================--------------------] 60% est: 3s  plot: [8,3] [==============================--------------------] 60% est: 3s  plot: [8,4] [===============================-------------------] 61% est: 3s  plot: [8,5] [===============================-------------------] 62% est: 3s  plot: [8,6] [===============================-------------------] 62% est: 3s  plot: [8,7] [================================------------------] 63% est: 3s  plot: [8,8] [================================------------------] 64% est: 3s  plot: [8,9] [================================------------------] 65% est: 3s  plot: [8,10] [================================-----------------] 65% est: 3s  plot: [8,11] [================================-----------------] 66% est: 3s  plot: [8,12] [=================================----------------] 67% est: 3s  plot: [9,1] [==================================----------------] 67% est: 3s  plot: [9,2] [==================================----------------] 68% est: 3s  plot: [9,3] [==================================----------------] 69% est: 3s  plot: [9,4] [===================================---------------] 69% est: 2s  plot: [9,5] [===================================---------------] 70% est: 2s  plot: [9,6] [===================================---------------] 71% est: 2s  plot: [9,7] [====================================--------------] 72% est: 2s  plot: [9,8] [====================================--------------] 72% est: 2s  plot: [9,9] [====================================--------------] 73% est: 2s  plot: [9,10] [====================================-------------] 74% est: 2s  plot: [9,11] [====================================-------------] 74% est: 2s  plot: [9,12] [=====================================------------] 75% est: 2s  plot: [10,1] [=====================================------------] 76% est: 2s  plot: [10,2] [=====================================------------] 76% est: 2s  plot: [10,3] [======================================-----------] 77% est: 2s  plot: [10,4] [======================================-----------] 78% est: 2s  plot: [10,5] [======================================-----------] 78% est: 2s  plot: [10,6] [=======================================----------] 79% est: 2s  plot: [10,7] [=======================================----------] 80% est: 2s  plot: [10,8] [=======================================----------] 81% est: 2s  plot: [10,9] [========================================---------] 81% est: 1s  plot: [10,10] [=======================================---------] 82% est: 1s  plot: [10,11] [========================================--------] 83% est: 1s  plot: [10,12] [========================================--------] 83% est: 1s  plot: [11,1] [=========================================--------] 84% est: 1s  plot: [11,2] [==========================================-------] 85% est: 1s  plot: [11,3] [==========================================-------] 85% est: 1s  plot: [11,4] [==========================================-------] 86% est: 1s  plot: [11,5] [===========================================------] 87% est: 1s  plot: [11,6] [===========================================------] 88% est: 1s  plot: [11,7] [===========================================------] 88% est: 1s  plot: [11,8] [============================================-----] 89% est: 1s  plot: [11,9] [============================================-----] 90% est: 1s  plot: [11,10] [===========================================-----] 90% est: 1s  plot: [11,11] [============================================----] 91% est: 1s  plot: [11,12] [============================================----] 92% est: 1s  plot: [12,1] [=============================================----] 92% est: 1s  plot: [12,2] [==============================================---] 93% est: 1s  plot: [12,3] [==============================================---] 94% est: 0s  plot: [12,4] [==============================================---] 94% est: 0s  plot: [12,5] [===============================================--] 95% est: 0s  plot: [12,6] [===============================================--] 96% est: 0s  plot: [12,7] [===============================================--] 97% est: 0s  plot: [12,8] [================================================-] 97% est: 0s  plot: [12,9] [================================================-] 98% est: 0s  plot: [12,10] [===============================================-] 99% est: 0s  plot: [12,11] [================================================] 99% est: 0s  plot: [12,12] [================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/kendall_dfdiv.eps"
Warning messages:
1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
2: In cor(data, method = cor_method) : the standard deviation is zero
#+end_example

Open one of these =eps= files with:

#+HEADER: :var repository_dir=repository_dir
#+begin_src sh
evince $repository_dir/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_dfdiv.eps&
#+end_src

#+RESULTS:

What are the common rows between all correlations?

#+HEADER: :results output :session *R* :exports both
#+HEADER: :tangle legup-tuner/post_place_and_route/py/results/r_scripts/more_correlations.r
#+begin_src R

print(cor_pearson)
print(cor_spearman)
print(cor_kendall)

correlations <- inner_join(cor_pearson[c("First.Variable",
                                         "Second.Variable")],
                           cor_spearman[c("First.Variable",
                                          "Second.Variable")])

plot_correlation_columns(load_data(application, experiments), correlations,
                         "pearson_spearman", application)

correlations <- inner_join(cor_pearson[c("First.Variable",
                                         "Second.Variable")],
                           cor_kendall[c("First.Variable",
                                         "Second.Variable")])

plot_correlation_columns(load_data(application, experiments), correlations,
                         "pearson_kendall", application)

correltions <- inner_join(cor_spearman[c("First.Variable",
                                         "Second.Variable")],
                          cor_kendall[c("First.Variable",
                                        "Second.Variable")])
plot_correlation_columns(load_data(application, experiments), correlations,
                         "spearman_kendall", application)

correlations <- inner_join(inner_join(cor_pearson[c("First.Variable",
                                                    "Second.Variable")],
                                      cor_spearman[c("First.Variable",
                                                     "Second.Variable")]),
                           cor_kendall[c("First.Variable",
                                         "Second.Variable")])

plot_correlation_columns(load_data(application, experiments), correlations,
                         "pearson_spearman_kendall", application)

#+end_src

#+RESULTS:
#+begin_example
                               First.Variable Second.Variable Correlation
677                set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                   Blocks             RAM   1.0000000
370  set_operation_latency.unsigned_divide_64            FMax   0.9580363
1238             set_parameter.MB_MINIMIZE_HW             DPS   0.8393787
1050                                   Cycles          Blocks  -0.8387330
1201                                   Cycles             RAM  -0.8387330
803  set_operation_latency.signed_multiply_16            Regs   0.7855710
887   set_resource_constraint.altfp_divide_32            Regs   0.7689415
852       set_operation_latency.signed_add_64            Regs   0.7659582
394      set_resource_constraint.signed_add_8            FMax   0.7571533
                                First.Variable Second.Variable Correlation
677                 set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                    Blocks             RAM   1.0000000
1281                set_parameter.MULTIPUMPING             DPS   0.8090146
1355                                      Pins             DPS  -0.8090146
1238              set_parameter.MB_MINIMIZE_HW             DPS   0.7857013
331  set_resource_constraint.altfp_subtract_16            FMax   0.7223399
370   set_operation_latency.unsigned_divide_64            FMax   0.7210865
219   set_operation_latency.unsigned_divide_64          Cycles   0.7129351
821        set_operation_latency.signed_add_32            Regs   0.7084865
415      set_operation_latency.altfp_divide_32            FMax  -0.6974540
                                First.Variable Second.Variable Correlation
677                 set_parameter.MULTIPUMPING            Pins  -1.0000000
1206                                    Blocks             RAM   1.0000000
1281                set_parameter.MULTIPUMPING             DPS   0.7561760
1355                                      Pins             DPS  -0.7561760
1238              set_parameter.MB_MINIMIZE_HW             DPS   0.7343854
984                 set_parameter.PIPELINE_ALL          Blocks   0.6139115
1135                set_parameter.PIPELINE_ALL             RAM   0.6139115
821        set_operation_latency.signed_add_32            Regs   0.6039735
370   set_operation_latency.unsigned_divide_64            FMax   0.5961823
331  set_resource_constraint.altfp_subtract_16            FMax   0.5900102
Joining, by = c("First.Variable", "Second.Variable")
 plot: [1,1] [=-------------------------------------------------]  2% est: 0s  plot: [1,2] [==------------------------------------------------]  3% est: 2s  plot: [1,3] [==------------------------------------------------]  5% est: 3s  plot: [1,4] [===-----------------------------------------------]  6% est: 3s  plot: [1,5] [====----------------------------------------------]  8% est: 3s  plot: [1,6] [=====---------------------------------------------]  9% est: 3s  plot: [1,7] [=====---------------------------------------------] 11% est: 3s  plot: [1,8] [======--------------------------------------------] 12% est: 3s  plot: [2,1] [=======-------------------------------------------] 14% est: 3s  plot: [2,2] [========------------------------------------------] 16% est: 3s  plot: [2,3] [=========-----------------------------------------] 17% est: 3s  plot: [2,4] [=========-----------------------------------------] 19% est: 3s  plot: [2,5] [==========----------------------------------------] 20% est: 3s  plot: [2,6] [===========---------------------------------------] 22% est: 3s  plot: [2,7] [============--------------------------------------] 23% est: 3s  plot: [2,8] [============--------------------------------------] 25% est: 3s  plot: [3,1] [=============-------------------------------------] 27% est: 3s  plot: [3,2] [==============------------------------------------] 28% est: 3s  plot: [3,3] [===============-----------------------------------] 30% est: 3s  plot: [3,4] [================----------------------------------] 31% est: 3s  plot: [3,5] [================----------------------------------] 33% est: 2s  plot: [3,6] [=================---------------------------------] 34% est: 2s  plot: [3,7] [==================--------------------------------] 36% est: 2s  plot: [3,8] [===================-------------------------------] 38% est: 2s  plot: [4,1] [====================------------------------------] 39% est: 2s  plot: [4,2] [====================------------------------------] 41% est: 2s  plot: [4,3] [=====================-----------------------------] 42% est: 2s  plot: [4,4] [======================----------------------------] 44% est: 2s  plot: [4,5] [=======================---------------------------] 45% est: 2s  plot: [4,6] [=======================---------------------------] 47% est: 2s  plot: [4,7] [========================--------------------------] 48% est: 2s  plot: [4,8] [=========================-------------------------] 50% est: 2s  plot: [5,1] [==========================------------------------] 52% est: 2s  plot: [5,2] [===========================-----------------------] 53% est: 2s  plot: [5,3] [===========================-----------------------] 55% est: 2s  plot: [5,4] [============================----------------------] 56% est: 2s  plot: [5,5] [=============================---------------------] 58% est: 2s  plot: [5,6] [==============================--------------------] 59% est: 2s  plot: [5,7] [==============================--------------------] 61% est: 1s  plot: [5,8] [===============================-------------------] 62% est: 1s  plot: [6,1] [================================------------------] 64% est: 1s  plot: [6,2] [=================================-----------------] 66% est: 1s  plot: [6,3] [==================================----------------] 67% est: 1s  plot: [6,4] [==================================----------------] 69% est: 1s  plot: [6,5] [===================================---------------] 70% est: 1s  plot: [6,6] [====================================--------------] 72% est: 1s  plot: [6,7] [=====================================-------------] 73% est: 1s  plot: [6,8] [======================================------------] 75% est: 1s  plot: [7,1] [======================================------------] 77% est: 1s  plot: [7,2] [=======================================-----------] 78% est: 1s  plot: [7,3] [========================================----------] 80% est: 1s  plot: [7,4] [=========================================---------] 81% est: 1s  plot: [7,5] [=========================================---------] 83% est: 1s  plot: [7,6] [==========================================--------] 84% est: 1s  plot: [7,7] [===========================================-------] 86% est: 1s  plot: [7,8] [============================================------] 88% est: 0s  plot: [8,1] [=============================================-----] 89% est: 0s  plot: [8,2] [=============================================-----] 91% est: 0s  plot: [8,3] [==============================================----] 92% est: 0s  plot: [8,4] [===============================================---] 94% est: 0s  plot: [8,5] [================================================--] 95% est: 0s  plot: [8,6] [================================================--] 97% est: 0s  plot: [8,7] [=================================================-] 98% est: 0s  plot: [8,8] [==================================================]100% est: 0s                                                                               [1] "Plot generated at /home/phrb/org/journal/legup-tuner/post_place_and_route/py/results/r_scripts/correlations/pearson_spearman_largest_dfdiv.eps"
null device 
          1 
Warning message:
In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
Joining, by = c("First.Variable", "Second.Variable")
                            First.Variable Second.Variable
1               set_parameter.MULTIPUMPING            Pins
2                                   Blocks             RAM
3 set_operation_latency.unsigned_divide_64            FMax
4             set_parameter.MB_MINIMIZE_HW             DPS
Joining, by = c("First.Variable", "Second.Variable")
                             First.Variable Second.Variable
1                set_parameter.MULTIPUMPING            Pins
2                                    Blocks             RAM
3                set_parameter.MULTIPUMPING             DPS
4                                      Pins             DPS
5              set_parameter.MB_MINIMIZE_HW             DPS
6 set_resource_constraint.altfp_subtract_16            FMax
7  set_operation_latency.unsigned_divide_64            FMax
8       set_operation_latency.signed_add_32            Regs
Joining, by = c("First.Variable", "Second.Variable")
Joining, by = c("First.Variable", "Second.Variable")
                            First.Variable Second.Variable
1               set_parameter.MULTIPUMPING            Pins
2                                   Blocks             RAM
3 set_operation_latency.unsigned_divide_64            FMax
4             set_parameter.MB_MINIMIZE_HW             DPS
#+end_example

**** Discussions with Arnaud and Brice :DOE:FPGA:Autotuning:Arnaud:DataVis:
- Read [[ https://hal.inria.fr/hal-01579422][Steven's reports]]
- Introduction to Experiment Design and in particular to screening:
  https://github.com/alegrand/SMPE/blob/master/lectures/5_design_of_experiments.pdf
- Reading Jain's book entitled "The Art of Computer Systems
  Performance Analysis" could be a good thing too.
- Correlations can be fixed for non-linear relations but the measure
  monotony. If the relation is quadratic, this notion of correlation
  is completely irrelevant.
***** Particular difficulties
- Data is messy:
  - some metrics are perfectly related
  - some metrics have only two possible values
  - some metrics have very few possible values
  - some parameters seem to be correlated to each others as we got NAs
    in the regression and a perfect (over)fit.
  - parameter space is biased by the learning algorithm
- High parameter dimension:
  - A good sample is anyway not possible. This means the initial
    sample may strongly bias our analysis as many large areas of the
    space will not be covered.
  - Having indications of which parameters are the most influent is
    generally done through 2-level factorial designs.
    - This misses possible non linear (concave or convex) relations,
      which may be important here.
    - With so many dimensions only saturated screening designs would
      have a chance to provide some relevant feedback. One would then
      completely ignore interactions.
      they 
- Quantile regression: most techniques (anova, linear model, or even
  correlations...) to analyze the experiments focus on the average
  behavior whereas we are rather looking for minimas, hence quantile
  regression. Such regression can be hard to use and may not be very
  robust in high dimension.
- Pareto optimization:
  - We still do not know what the space looks like

***** TODO:
- Clean the data again:
  - remove metrics with only one value (LUs) linked metrics (Blocks
    and RAM) and probably even binary metrics as it does not fit
    really well in a multicriteria optimization framework
  - Ensure we do minimization (e.g., Fmax = -Fmax or replace cycles
    and Fmax by an estimation of the wall-clock time)
  - We should probably keeep the makespan (Cycles/Fmax), Regs, DSP.
- Characterize the Pareto border: i.e. for each entry, check wheter
  there exists an other one which is better on all metrics. Then we
  can colorize our simplfied ggpair with this Pareto-dominated value.
- Try to clean further but for parameters
  - Get the search space specification to know whether some parameters
    are supposed to change or not.
  - Identify which parameters are binary and tag them accordingly
    (with factors being true or false).
  - Identify which parameters are actually (unordered) factors and tag
    them accordingly.
- Do all these cleanups first manually, step by step and then into a
  single dedicated reading function.
- Regarding reading, you may want to have a look at the tidyverse with
  readr, magrittr and
  such. https://www.rstudio.org/links/data_wrangling_cheat_sheet
- Maybe we could try to reobtain some data.
